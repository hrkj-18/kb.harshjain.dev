{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"chatbots/chatbots101/","text":"Building Chatbots in Python EchoBot I bot_template = \"BOT : {0}\" user_template = \"USER : {0}\" # Define a function that responds to a user's message: respond def respond(message): # Concatenate the user's message to the end of a standard bot respone bot_message = \"I can hear you! You said: \" + message # Return the result return bot_message # Test function print(respond(\"hello!\")) I can hear you! You said: hello! EchoBot II # Create templates bot_template = \"BOT : {0}\" user_template = \"USER : {0}\" # Define a function that sends a message to the bot: send_message def send_message(message): # Print user_template including the user_message print(user_template.format(message)) # Get the bot's response to the message response = respond(message) # Print the bot template including the bot's response. print(bot_template.format(response)) # Send a message to the bot send_message(\"hello\") USER : hello BOT : I can hear you! You said: hello Creating a personality ChitChat # Define variables name = \"Greg\" weather = \"cloudy\" # Define a dictionary with the predefined responses responses = { \"what's your name?\": \"my name is {0}\".format(name), \"what's today's weather?\": \"the weather is {0}\".format(weather), \"default\": \"default message\" } # Return the matching response if there is one, default otherwise def respond(message): # Check if the message is in the responses if message in responses: # Return the matching message bot_message = responses[message] else: # Return the \"default\" message bot_message = responses[\"default\"] return bot_message In [1]: send_message(\"what's today's weather?\") USER : what's today's weather? BOT : the weather is cloudy In [2]: send_message(\"what's your name?\") USER : what's your name? BOT : my name is Greg In [3]: send_message(\"what's your favorite color?\") USER : what's your favorite color? BOT : default message Adding variety # Import the random module import random name = \"Greg\" weather = \"cloudy\" # Define a dictionary containing a list of responses for each message responses = { \"what's your name?\": [ \"my name is {0}\".format(name), \"they call me {0}\".format(name), \"I go by {0}\".format(name) ], \"what's today's weather?\": [ \"the weather is {0}\".format(weather), \"it's {0} today\".format(weather) ], \"default\": [\"default message\"] } # Use random.choice() to choose a matching response def respond(message): if message in responses: bot_message = random.choice(responses[message]) else: bot_message = random.choice(responses[\"default\"]) return bot_message In [1]: send_message(\"what's your name?\") USER : what's your name? BOT : my name is Greg In [2]: send_message(\"what's your name?\") USER : what's your name? BOT : I go by Greg In [3]: send_message(\"what's your name?\") USER : what's your name? BOT : they call me Greg ELIZA I: asking questions import random # Create a responses dictionary responses = {'statement': ['tell me more!', 'why do you think that?', 'how long have you felt this way?', 'I find that extremely interesting', 'can you back that up?', 'oh wow!', ':)' ], 'question': [\"I don't know :(\", 'you tell me!' ] } def respond(message): # Check for a question mark if message.endswith(\"?\"): # Return a random question return random.choice(responses[\"question\"]) # Return a random statement return random.choice(responses[\"statement\"]) # Send messages ending in a question mark send_message(\"what's today's weather?\") send_message(\"what's today's weather?\") # Send messages which don't end with a question mark send_message(\"I love building chatbots\") send_message(\"I love building chatbots\") USER : what's today's weather? BOT : you tell me! USER : what's today's weather? BOT : I don't know :( USER : I love building chatbots BOT : can you back that up? USER : I love building chatbots BOT : oh wow! ELIZA II: Extracting key phrases rules={'I want (.*)': ['What would it mean if you got {0}', 'Why do you want {0}', \"What's stopping you from getting {0}\" ], 'do you remember (.*)': ['Did you think I would forget {0}', \"Why haven't you been able to forget {0}\", 'What about {0}', 'Yes .. and?' ], 'do you think (.*)': ['if {0}? Absolutely.', 'No chance' ], 'if (.*)': [\"Do you really think it's likely that {0}\", 'Do you wish that {0}', 'What do you think about {0}', 'Really--if {0}' ] } # Define match_rule() def match_rule(rules, message): response, phrase = \"default\", None # Iterate over the rules dictionary for pattern, responses in rules.items(): # Create a match object match = re.search(pattern, message) if match is not None: # Choose a random response response = random.choice(responses) if '{0}' in response: phrase = match.group(1) # Return the response and phrase return response.format(phrase) # Test match_rule print(match_rule(rules, \"do you remember your last birthday\")) Did you think I would forget your last birthday ELIZA III: Pronouns # Define replace_pronouns() def replace_pronouns(message): message = message.lower() if 'me' in message: # Replace 'me' with 'you' return re.sub(\"me\", \"you\", message) if 'my' in message: # Replace 'my' with 'your' return re.sub(\"my\", \"your\", message) if 'your' in message: # Replace 'your' with 'my' return re.sub(\"your\", \"my\", message) if 'you' in message: # Replace 'you' with 'me' return re.sub(\"you\", \"me\", message) return message print(replace_pronouns(\"my last birthday\")) print(replace_pronouns(\"when you went to Florida\")) print(replace_pronouns(\"I had my own castle\")) your last birthday when me went to florida i had your own castle ELIZA IV: Putting it all together # Define respond() def respond(message): # Call match_rule response, phrase = match_rule(rules, message) if '{0}' in response: # Replace the pronouns in the phrase phrase = replace_pronouns(phrase) # Include the phrase in the response response = response.format(phrase) return response # Send the messages send_message(\"do you remember your last birthday\") send_message(\"do you think humans should be worried about AI\") send_message(\"I want a robot friend\") send_message(\"what if you could be anything you wanted\") USER : do you remember your last birthday BOT : What about my last birthday USER : do you think humans should be worried about AI BOT : if humans should be worried about ai? Absolutely. USER : I want a robot friend BOT : What's stopping you from getting a robot friend USER : what if you could be anything you wanted BOT : Really--if me could be anything me wanted","title":"Chatbots 101"},{"location":"chatbots/chatbots101/#building-chatbots-in-python","text":"","title":"Building Chatbots in Python"},{"location":"chatbots/chatbots101/#echobot-i","text":"bot_template = \"BOT : {0}\" user_template = \"USER : {0}\" # Define a function that responds to a user's message: respond def respond(message): # Concatenate the user's message to the end of a standard bot respone bot_message = \"I can hear you! You said: \" + message # Return the result return bot_message # Test function print(respond(\"hello!\")) I can hear you! You said: hello!","title":"EchoBot I"},{"location":"chatbots/chatbots101/#echobot-ii","text":"# Create templates bot_template = \"BOT : {0}\" user_template = \"USER : {0}\" # Define a function that sends a message to the bot: send_message def send_message(message): # Print user_template including the user_message print(user_template.format(message)) # Get the bot's response to the message response = respond(message) # Print the bot template including the bot's response. print(bot_template.format(response)) # Send a message to the bot send_message(\"hello\") USER : hello BOT : I can hear you! You said: hello","title":"EchoBot II"},{"location":"chatbots/chatbots101/#creating-a-personality","text":"","title":"Creating a personality"},{"location":"chatbots/chatbots101/#chitchat","text":"# Define variables name = \"Greg\" weather = \"cloudy\" # Define a dictionary with the predefined responses responses = { \"what's your name?\": \"my name is {0}\".format(name), \"what's today's weather?\": \"the weather is {0}\".format(weather), \"default\": \"default message\" } # Return the matching response if there is one, default otherwise def respond(message): # Check if the message is in the responses if message in responses: # Return the matching message bot_message = responses[message] else: # Return the \"default\" message bot_message = responses[\"default\"] return bot_message In [1]: send_message(\"what's today's weather?\") USER : what's today's weather? BOT : the weather is cloudy In [2]: send_message(\"what's your name?\") USER : what's your name? BOT : my name is Greg In [3]: send_message(\"what's your favorite color?\") USER : what's your favorite color? BOT : default message","title":"ChitChat"},{"location":"chatbots/chatbots101/#adding-variety","text":"# Import the random module import random name = \"Greg\" weather = \"cloudy\" # Define a dictionary containing a list of responses for each message responses = { \"what's your name?\": [ \"my name is {0}\".format(name), \"they call me {0}\".format(name), \"I go by {0}\".format(name) ], \"what's today's weather?\": [ \"the weather is {0}\".format(weather), \"it's {0} today\".format(weather) ], \"default\": [\"default message\"] } # Use random.choice() to choose a matching response def respond(message): if message in responses: bot_message = random.choice(responses[message]) else: bot_message = random.choice(responses[\"default\"]) return bot_message In [1]: send_message(\"what's your name?\") USER : what's your name? BOT : my name is Greg In [2]: send_message(\"what's your name?\") USER : what's your name? BOT : I go by Greg In [3]: send_message(\"what's your name?\") USER : what's your name? BOT : they call me Greg","title":"Adding variety"},{"location":"chatbots/chatbots101/#eliza-i-asking-questions","text":"import random # Create a responses dictionary responses = {'statement': ['tell me more!', 'why do you think that?', 'how long have you felt this way?', 'I find that extremely interesting', 'can you back that up?', 'oh wow!', ':)' ], 'question': [\"I don't know :(\", 'you tell me!' ] } def respond(message): # Check for a question mark if message.endswith(\"?\"): # Return a random question return random.choice(responses[\"question\"]) # Return a random statement return random.choice(responses[\"statement\"]) # Send messages ending in a question mark send_message(\"what's today's weather?\") send_message(\"what's today's weather?\") # Send messages which don't end with a question mark send_message(\"I love building chatbots\") send_message(\"I love building chatbots\") USER : what's today's weather? BOT : you tell me! USER : what's today's weather? BOT : I don't know :( USER : I love building chatbots BOT : can you back that up? USER : I love building chatbots BOT : oh wow!","title":"ELIZA I: asking questions"},{"location":"chatbots/chatbots101/#eliza-ii-extracting-key-phrases","text":"rules={'I want (.*)': ['What would it mean if you got {0}', 'Why do you want {0}', \"What's stopping you from getting {0}\" ], 'do you remember (.*)': ['Did you think I would forget {0}', \"Why haven't you been able to forget {0}\", 'What about {0}', 'Yes .. and?' ], 'do you think (.*)': ['if {0}? Absolutely.', 'No chance' ], 'if (.*)': [\"Do you really think it's likely that {0}\", 'Do you wish that {0}', 'What do you think about {0}', 'Really--if {0}' ] } # Define match_rule() def match_rule(rules, message): response, phrase = \"default\", None # Iterate over the rules dictionary for pattern, responses in rules.items(): # Create a match object match = re.search(pattern, message) if match is not None: # Choose a random response response = random.choice(responses) if '{0}' in response: phrase = match.group(1) # Return the response and phrase return response.format(phrase) # Test match_rule print(match_rule(rules, \"do you remember your last birthday\")) Did you think I would forget your last birthday","title":"ELIZA II: Extracting key phrases"},{"location":"chatbots/chatbots101/#eliza-iii-pronouns","text":"# Define replace_pronouns() def replace_pronouns(message): message = message.lower() if 'me' in message: # Replace 'me' with 'you' return re.sub(\"me\", \"you\", message) if 'my' in message: # Replace 'my' with 'your' return re.sub(\"my\", \"your\", message) if 'your' in message: # Replace 'your' with 'my' return re.sub(\"your\", \"my\", message) if 'you' in message: # Replace 'you' with 'me' return re.sub(\"you\", \"me\", message) return message print(replace_pronouns(\"my last birthday\")) print(replace_pronouns(\"when you went to Florida\")) print(replace_pronouns(\"I had my own castle\")) your last birthday when me went to florida i had your own castle","title":"ELIZA III: Pronouns"},{"location":"chatbots/chatbots101/#eliza-iv-putting-it-all-together","text":"# Define respond() def respond(message): # Call match_rule response, phrase = match_rule(rules, message) if '{0}' in response: # Replace the pronouns in the phrase phrase = replace_pronouns(phrase) # Include the phrase in the response response = response.format(phrase) return response # Send the messages send_message(\"do you remember your last birthday\") send_message(\"do you think humans should be worried about AI\") send_message(\"I want a robot friend\") send_message(\"what if you could be anything you wanted\") USER : do you remember your last birthday BOT : What about my last birthday USER : do you think humans should be worried about AI BOT : if humans should be worried about ai? Absolutely. USER : I want a robot friend BOT : What's stopping you from getting a robot friend USER : what if you could be anything you wanted BOT : Really--if me could be anything me wanted","title":"ELIZA IV: Putting it all together"},{"location":"data-science/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"data-science/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"data-science/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"data-science/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"pandas/","text":"Chapter 2","title":"Index"},{"location":"pandas/#chapter-2","text":"","title":"Chapter 2"},{"location":"pandas/chapter-1/","text":"df.head() df.tail() df.info() prints first five entries prints last five entries prints the info of all columns NumPy and pandas working together import numpy as np # Create array of DataFrame values: np_vals np_vals = df.values Building DataFrames from scratch list_keys = ['Country', 'Total'] list_values = [['United States', 'Soviet Union', 'United Kingdom'], [1118, 473, 273]] zipped = list(zip(list_keys , list_values)) print(zipped) data = dict(zipped) df = pd.DataFrame(data) print(df) [ ( 'Country', [ 'United States', 'Soviet Union', 'United Kingdom' ] ), ( 'Total', [1118, 473, 273] ) ] Country Total 0 United States 1118 1 Soviet Union 473 2 United Kingdom 273 Building DataFrames with broadcasting state = \"PA\" cities=['Manheim','Preston park','Biglerville'] data = {'state':state, 'city':cities} df = pd.DataFrame(data) print(df) state city 0 PA Manheim 1 PA Preston park 2 PA Biglerville Importing & exporting data Reading a flat file df1 = pd.read_csv(data_file) print(df1) Year Total Population 0 1960 3.034971e+09 1 1970 3.684823e+09 2 1980 4.436590e+09 3 1990 5.282716e+09 4 2000 6.115974e+09 5 2010 6.924283e+09 new_labels = ['year', 'population'] df2 = pd.read_csv(data_file, header=0, names=new_labels) print(df2) year population 0 1960 3.034971e+09 1 1970 3.684823e+09 2 1980 4.436590e+09 3 1990 5.282716e+09 4 2000 6.115974e+09 5 2010 6.924283e+09 Delimiters, headers, and extensions df1 = pd.read_csv(file_messy) print(df1.head()) df2 = pd.read_csv(file_messy, delimiter=' ', header=3, comment='#') print(df2.head()) df2.to_csv(file_clean, index=False) df2.to_excel('file_clean.xlsx', index=False) The following stock data was collect on 2016-AUG-25 from an unknown source These kind of comments are not very useful are they? Probably should just throw this line away too but not the next since those are column labels name Jan Feb Mar Apr May Jun Jul Aug SepOct No...NaN # So that line you just read has all the column...NaN IBM 156.08 160.01 159.81 165.22 172.25 167.15 1...NaN name Jan Feb ... Nov Dec 0 IBM 156.08 160.01 ... 137.21 137.96 1 MSFT 45.51 43.08 ... 53.88 55.40 2 GOOGLE 512.42 537.99 ... 735.39 755.35 3 APPLE 110.64 125.43 ... 118.16 111.73 [4 rows x 13 columns] Plotting series using pandas df.plot(color='red') plt.title('Temperature in Austin') plt.xlabel('Hours since midnight August 1, 2010') plt.ylabel('Temperature (degrees F)') print(df.head(3)) plt.show() Temperature (deg F) 0 79.0 1 77.4 2 76.4 Plotting DataFrames print(df.head()) Temperature (deg F) Dew Point (deg F) Pressure (atm) 0 79.0 70.8 1.0 1 77.4 71.2 1.0 2 76.4 71.3 1.0 3 75.7 71.4 1.0 4 75.1 71.4 1.0 df.plot() plt.show() df.plot(subplots=True) plt.show() column_list1 = ['Dew Point (deg F)'] df[column_list1].plot() plt.show() column_list2 = ['Temperature (deg F)','Dew Point (deg F)'] df[column_list2].plot() plt.show()","title":"Chapter 1"},{"location":"pandas/chapter-1/#numpy-and-pandas-working-together","text":"import numpy as np # Create array of DataFrame values: np_vals np_vals = df.values","title":"NumPy and pandas working together"},{"location":"pandas/chapter-1/#building-dataframes-from-scratch","text":"list_keys = ['Country', 'Total'] list_values = [['United States', 'Soviet Union', 'United Kingdom'], [1118, 473, 273]] zipped = list(zip(list_keys , list_values)) print(zipped) data = dict(zipped) df = pd.DataFrame(data) print(df) [ ( 'Country', [ 'United States', 'Soviet Union', 'United Kingdom' ] ), ( 'Total', [1118, 473, 273] ) ] Country Total 0 United States 1118 1 Soviet Union 473 2 United Kingdom 273","title":"Building DataFrames from scratch"},{"location":"pandas/chapter-1/#building-dataframes-with-broadcasting","text":"state = \"PA\" cities=['Manheim','Preston park','Biglerville'] data = {'state':state, 'city':cities} df = pd.DataFrame(data) print(df) state city 0 PA Manheim 1 PA Preston park 2 PA Biglerville","title":"Building DataFrames with broadcasting"},{"location":"pandas/chapter-1/#importing-exporting-data","text":"","title":"Importing &amp; exporting data"},{"location":"pandas/chapter-1/#reading-a-flat-file","text":"df1 = pd.read_csv(data_file) print(df1) Year Total Population 0 1960 3.034971e+09 1 1970 3.684823e+09 2 1980 4.436590e+09 3 1990 5.282716e+09 4 2000 6.115974e+09 5 2010 6.924283e+09 new_labels = ['year', 'population'] df2 = pd.read_csv(data_file, header=0, names=new_labels) print(df2) year population 0 1960 3.034971e+09 1 1970 3.684823e+09 2 1980 4.436590e+09 3 1990 5.282716e+09 4 2000 6.115974e+09 5 2010 6.924283e+09","title":"Reading a flat file"},{"location":"pandas/chapter-1/#delimiters-headers-and-extensions","text":"df1 = pd.read_csv(file_messy) print(df1.head()) df2 = pd.read_csv(file_messy, delimiter=' ', header=3, comment='#') print(df2.head()) df2.to_csv(file_clean, index=False) df2.to_excel('file_clean.xlsx', index=False) The following stock data was collect on 2016-AUG-25 from an unknown source These kind of comments are not very useful are they? Probably should just throw this line away too but not the next since those are column labels name Jan Feb Mar Apr May Jun Jul Aug SepOct No...NaN # So that line you just read has all the column...NaN IBM 156.08 160.01 159.81 165.22 172.25 167.15 1...NaN name Jan Feb ... Nov Dec 0 IBM 156.08 160.01 ... 137.21 137.96 1 MSFT 45.51 43.08 ... 53.88 55.40 2 GOOGLE 512.42 537.99 ... 735.39 755.35 3 APPLE 110.64 125.43 ... 118.16 111.73 [4 rows x 13 columns]","title":"Delimiters, headers, and extensions"},{"location":"pandas/chapter-1/#plotting-series-using-pandas","text":"df.plot(color='red') plt.title('Temperature in Austin') plt.xlabel('Hours since midnight August 1, 2010') plt.ylabel('Temperature (degrees F)') print(df.head(3)) plt.show() Temperature (deg F) 0 79.0 1 77.4 2 76.4","title":"Plotting series using pandas"},{"location":"pandas/chapter-1/#plotting-dataframes","text":"print(df.head()) Temperature (deg F) Dew Point (deg F) Pressure (atm) 0 79.0 70.8 1.0 1 77.4 71.2 1.0 2 76.4 71.3 1.0 3 75.7 71.4 1.0 4 75.1 71.4 1.0 df.plot() plt.show() df.plot(subplots=True) plt.show() column_list1 = ['Dew Point (deg F)'] df[column_list1].plot() plt.show() column_list2 = ['Temperature (deg F)','Dew Point (deg F)'] df[column_list2].plot() plt.show()","title":"Plotting DataFrames"},{"location":"pandas/chapter-2/","text":"Visual exploratory data analysis pandas line plots df.plot(x='column_name' , y='column_name or list of column_names') plt.xlabel('Xaxis description') plt.ylabel('Yaxis description') plt.title('Title') plt.show() pandas scatter plots df.plot(kind='scatter', x ='column_name', y ='column_name', s=size) pandas box plots cols = ['requiured','columns'] df[cols].plot(kind='box',subplots=True) plt.show() pandas hist, pdf and cdf # This formats the plots such that they appear on separate rows fig, axes = plt.subplots(nrows=2, ncols=1) # Plot the PDF df.fraction.plot(ax=axes[0], kind='hist', normed=True, bins=30, range=(0,.3)) plt.show() # Plot the CDF df.fraction.plot(ax=axes[1], kind='hist', normed=True, bins=30, cumulative=True, range=(0,.3)) plt.show() Statistical exploratory data analysis Describe df.describe() Prints all the min max and quartiles of all the columns ### Min & Max df.min() or df.max() Gives min or max of all the columns Count print(df.count()) prints the number of non missing values in all columns Quantiles print(df.quantile([0.05, 0.95])) Separating populations with Boolean indexing filtered_df=df.loc[df[column_name]='Value'] Creating and using a DatetimeIndex # Prepare a format string: time_format time_format = '%Y-%m-%d %H:%M' # Convert date_list into a datetime object: my_datetimes my_datetimes = pd.to_datetime(date_list, format=time_format) # Construct a pandas Series using temperature_list and my_datetimes: time_series time_series = pd.Series(temperature_list, index=my_datetimes) ['20100101 00:00', '20100101 01:00', '20100101 02:00', '20100101 03:00',] 2010-01-01 00:00:00 46.2 2010-01-01 01:00:00 44.6 2010-01-01 02:00:00 44.1 Partial string indexing and slicing # Extract the hour from 9pm to 10pm on '2010-10-11': ts1 ts1 = ts0.loc['2010-10-11 21:00:00':'2010-10-11 22:00:00'] # Extract '2010-07-04' from ts0: ts2 ts2 = ts0.loc['2010-07-04'] # Extract data from '2010-12-15' to '2010-12-31': ts3 ts3 = ts0.loc['2010-12-15':'2010-12-31'] Reindexing the Index ts4 = ts2.reindex(ts1.index, method='ffill') Resampling and frequency df1 = df['Temperature'].resample('6h').mean() # Downsample to daily data and count the number of data points: df2 df2 = df['Temperature'].resample('D').count() Separating and resampling february = df['Temperature']['2010-Feb'] # Downsample to obtain the daily lowest temperatures in February: february_lows february_lows = february.resample('D').min() Rolling mean and frequency # Extract data from 2010-Aug-01 to 2010-Aug-15: unsmoothed unsmoothed = df['Temperature']['2010-Aug-01':'2010-Aug-15'] # Apply a rolling mean with a 24 hour window: smoothed smoothed = unsmoothed.rolling(window=24).mean() # Create a new DataFrame with columns smoothed and unsmoothed: august august = pd.DataFrame({'smoothed':smoothed, 'unsmoothed':unsmoothed} Manipulating pandas time series Method chaining and filtering # Strip extra whitespace from the column names: df.columns df.columns = df.columns.str.strip() # Extract data for which the destination airport is Dallas: dallas dallas = df['Destination Airport'].str.contains('DAL') # Compute the total number of Dallas departures each day: daily_departures daily_departures = dallas.resample('D').sum() # Generate the summary statistics for daily Dallas departures: stats stats = daily_departures.describe() ts2_interp = ts2.reindex(ts1.index).interpolate(how='linear') # Compute the absolute difference of ts1 and ts2_interp: differences differences = np.abs(ts1 - ts2_interp) # Generate and print summary statistics of the differences print(differences.describe()) Time zones and conversion mask = df['Destination Airport'] == 'LAX' # Use the mask to subset the data: la la = df[mask] # Combine two columns of data to create a datetime series: times_tz_none times_tz_none = pd.to_datetime( la['Date (MM/DD/YYYY)'] + ' ' + la['Wheels-off Time'] ) # Localize the time to US/Central: times_tz_central times_tz_central = times_tz_none.dt.tz_localize('US/Central') # Convert the datetimes from US/Central to US/Pacific times_tz_pacific = times_tz_central.dt.tz_convert('US/Pacific') Plotting time series, datetime indexing df.plot() plt.show() # Convert the 'Date' column into a collection of datetime objects: df.Date df.Date = pd.to_datetime(df.Date) # Set the index to be the converted 'Date' column df.set_index('Date', inplace=True) # Re-plot the DataFrame to see that the axis is now datetime aware! df.plot() plt.show()","title":"Chapter 2"},{"location":"pandas/chapter-2/#visual-exploratory-data-analysis","text":"","title":"Visual exploratory data analysis"},{"location":"pandas/chapter-2/#pandas-line-plots","text":"df.plot(x='column_name' , y='column_name or list of column_names') plt.xlabel('Xaxis description') plt.ylabel('Yaxis description') plt.title('Title') plt.show()","title":"pandas line plots"},{"location":"pandas/chapter-2/#pandas-scatter-plots","text":"df.plot(kind='scatter', x ='column_name', y ='column_name', s=size)","title":"pandas scatter plots"},{"location":"pandas/chapter-2/#pandas-box-plots","text":"cols = ['requiured','columns'] df[cols].plot(kind='box',subplots=True) plt.show()","title":"pandas box plots"},{"location":"pandas/chapter-2/#pandas-hist-pdf-and-cdf","text":"# This formats the plots such that they appear on separate rows fig, axes = plt.subplots(nrows=2, ncols=1) # Plot the PDF df.fraction.plot(ax=axes[0], kind='hist', normed=True, bins=30, range=(0,.3)) plt.show() # Plot the CDF df.fraction.plot(ax=axes[1], kind='hist', normed=True, bins=30, cumulative=True, range=(0,.3)) plt.show()","title":"pandas hist, pdf and cdf"},{"location":"pandas/chapter-2/#statistical-exploratory-data-analysis","text":"","title":"Statistical exploratory data analysis"},{"location":"pandas/chapter-2/#describe","text":"df.describe() Prints all the min max and quartiles of all the columns ### Min & Max df.min() or df.max() Gives min or max of all the columns","title":"Describe"},{"location":"pandas/chapter-2/#count","text":"print(df.count()) prints the number of non missing values in all columns","title":"Count"},{"location":"pandas/chapter-2/#quantiles","text":"print(df.quantile([0.05, 0.95]))","title":"Quantiles"},{"location":"pandas/chapter-2/#separating-populations-with-boolean-indexing","text":"filtered_df=df.loc[df[column_name]='Value']","title":"Separating populations with Boolean indexing"},{"location":"pandas/chapter-2/#creating-and-using-a-datetimeindex","text":"# Prepare a format string: time_format time_format = '%Y-%m-%d %H:%M' # Convert date_list into a datetime object: my_datetimes my_datetimes = pd.to_datetime(date_list, format=time_format) # Construct a pandas Series using temperature_list and my_datetimes: time_series time_series = pd.Series(temperature_list, index=my_datetimes) ['20100101 00:00', '20100101 01:00', '20100101 02:00', '20100101 03:00',] 2010-01-01 00:00:00 46.2 2010-01-01 01:00:00 44.6 2010-01-01 02:00:00 44.1","title":"Creating and using a DatetimeIndex"},{"location":"pandas/chapter-2/#partial-string-indexing-and-slicing","text":"# Extract the hour from 9pm to 10pm on '2010-10-11': ts1 ts1 = ts0.loc['2010-10-11 21:00:00':'2010-10-11 22:00:00'] # Extract '2010-07-04' from ts0: ts2 ts2 = ts0.loc['2010-07-04'] # Extract data from '2010-12-15' to '2010-12-31': ts3 ts3 = ts0.loc['2010-12-15':'2010-12-31']","title":"Partial string indexing and slicing"},{"location":"pandas/chapter-2/#reindexing-the-index","text":"ts4 = ts2.reindex(ts1.index, method='ffill')","title":"Reindexing the Index"},{"location":"pandas/chapter-2/#resampling-and-frequency","text":"df1 = df['Temperature'].resample('6h').mean() # Downsample to daily data and count the number of data points: df2 df2 = df['Temperature'].resample('D').count()","title":"Resampling and frequency"},{"location":"pandas/chapter-2/#separating-and-resampling","text":"february = df['Temperature']['2010-Feb'] # Downsample to obtain the daily lowest temperatures in February: february_lows february_lows = february.resample('D').min()","title":"Separating and resampling"},{"location":"pandas/chapter-2/#rolling-mean-and-frequency","text":"# Extract data from 2010-Aug-01 to 2010-Aug-15: unsmoothed unsmoothed = df['Temperature']['2010-Aug-01':'2010-Aug-15'] # Apply a rolling mean with a 24 hour window: smoothed smoothed = unsmoothed.rolling(window=24).mean() # Create a new DataFrame with columns smoothed and unsmoothed: august august = pd.DataFrame({'smoothed':smoothed, 'unsmoothed':unsmoothed}","title":"Rolling mean and frequency"},{"location":"pandas/chapter-2/#manipulating-pandas-time-series","text":"","title":"Manipulating pandas time series"},{"location":"pandas/chapter-2/#method-chaining-and-filtering","text":"# Strip extra whitespace from the column names: df.columns df.columns = df.columns.str.strip() # Extract data for which the destination airport is Dallas: dallas dallas = df['Destination Airport'].str.contains('DAL') # Compute the total number of Dallas departures each day: daily_departures daily_departures = dallas.resample('D').sum() # Generate the summary statistics for daily Dallas departures: stats stats = daily_departures.describe() ts2_interp = ts2.reindex(ts1.index).interpolate(how='linear') # Compute the absolute difference of ts1 and ts2_interp: differences differences = np.abs(ts1 - ts2_interp) # Generate and print summary statistics of the differences print(differences.describe())","title":"Method chaining and filtering"},{"location":"pandas/chapter-2/#time-zones-and-conversion","text":"mask = df['Destination Airport'] == 'LAX' # Use the mask to subset the data: la la = df[mask] # Combine two columns of data to create a datetime series: times_tz_none times_tz_none = pd.to_datetime( la['Date (MM/DD/YYYY)'] + ' ' + la['Wheels-off Time'] ) # Localize the time to US/Central: times_tz_central times_tz_central = times_tz_none.dt.tz_localize('US/Central') # Convert the datetimes from US/Central to US/Pacific times_tz_pacific = times_tz_central.dt.tz_convert('US/Pacific')","title":"Time zones and conversion"},{"location":"pandas/chapter-2/#plotting-time-series-datetime-indexing","text":"df.plot() plt.show() # Convert the 'Date' column into a collection of datetime objects: df.Date df.Date = pd.to_datetime(df.Date) # Set the index to be the converted 'Date' column df.set_index('Date', inplace=True) # Re-plot the DataFrame to see that the axis is now datetime aware! df.plot() plt.show()","title":"Plotting time series, datetime indexing"},{"location":"python/","text":"Python","title":"Index"},{"location":"python/intermediate-python-for-data-science/dictionaries-and-pandas/","text":"Intermediate Python for Data Science Chapter 2 : Dictionaries And Pandas Dictionaries my_dict = { \"key1\":\"value1\", \"key2\":\"value2\", } print(my_dict['key1']) value1 my_dict.keys() dict_keys(['key2', 'key1']) my_dict['key3']='value3' print(my_dict) { \"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\" } del(my_dict['key3'] print(my_dict) { \"key1\":\"value1\", \"key2\":\"value2\", } Pandas names = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt'] dr = [True, False, False, False, True, True, True] cpc = [809, 731, 588, 18, 200, 70, 45] my_dict={'country' : names, 'drives_right' : dr, 'cars_per_cap' : cpc} cars=pd.DataFrame(my_dict) row_labels = ['US', 'AUS', 'JAP', 'IN', 'RU', 'MOR', 'EG'] print(cars) cars_per_cap country drives_right US 809 United States True AUS 731 Australia False JAP 588 Japan False IN 18 India False RU 200 Russia True MOR 70 Morocco True EG 45 Egypt True cars=pd.read_csv('cars.csv') print(cars) Unnamed: 0 cars_per_cap country drives_right 0 US 809 United States True 1 AUS 731 Australia False 2 JAP 588 Japan False 3 IN 18 India False 4 RU 200 Russia True 5 MOR 70 Morocco True 6 EG 45 Egypt True Specify the index_col argument inside pd.read_csv(): set it to 0, so that the first column is used as row labels. cars = pd.read_csv('cars.csv',index_col=0) print(cars) cars_per_cap country drives_right US 809 United States True AUS 731 Australia False JAP 588 Japan False IN 18 India False RU 200 Russia True MOR 70 Morocco True EG 45 Egypt True Use single square brackets to print out the country column of cars as a Pandas Series. Use double square brackets to print out the country column of cars as a Pandas DataFrame. # Print out country column as Pandas Series print(cars['country']) US United States AUS Australia JAP Japan IN India RU Russia MOR Morocco EG Egypt Name: country, dtype: object # Print out country column as Pandas DataFrame print(cars[['country']]) country US United States AUS Australia JAP Japan IN India RU Russia MOR Morocco EG Egypt # Print out DataFrame with country and drives_right columns print(cars[['country','drives_right'] country drives_right US United States True AUS Australia False JAP Japan False IN India False RU Russia True MOR Morocco True EG Egypt True Slicing print(cars[3:6]) cars_per_cap country drives_right IN 18 India False RU 200 Russia True MOR 70 Morocco True loc & iloc print(cars.loc['JAP']) OR print(cars.iloc[2]) cars_per_cap 588 country Japan drives_right False Name: JAP, dtype: object print(cars.loc[['AUS','EG']]) OR print(cars.iloc[[1,6]]) cars_per_cap country drives_right AUS 731 Australia False EG 45 Egypt True print(cars.loc['MOR','drives_right']) True print(cars.loc[['RU','MOR'],['country','drives_right']]) country drives_right RU Russia True MOR Morocco True","title":"Intermediate Python for Data Science"},{"location":"python/intermediate-python-for-data-science/dictionaries-and-pandas/#intermediate-python-for-data-science","text":"","title":"Intermediate Python for Data Science"},{"location":"python/intermediate-python-for-data-science/dictionaries-and-pandas/#chapter-2-dictionaries-and-pandas","text":"","title":"Chapter 2 : Dictionaries And Pandas"},{"location":"python/intermediate-python-for-data-science/dictionaries-and-pandas/#dictionaries","text":"my_dict = { \"key1\":\"value1\", \"key2\":\"value2\", } print(my_dict['key1']) value1 my_dict.keys() dict_keys(['key2', 'key1']) my_dict['key3']='value3' print(my_dict) { \"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\" } del(my_dict['key3'] print(my_dict) { \"key1\":\"value1\", \"key2\":\"value2\", }","title":"Dictionaries"},{"location":"python/intermediate-python-for-data-science/dictionaries-and-pandas/#pandas","text":"names = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt'] dr = [True, False, False, False, True, True, True] cpc = [809, 731, 588, 18, 200, 70, 45] my_dict={'country' : names, 'drives_right' : dr, 'cars_per_cap' : cpc} cars=pd.DataFrame(my_dict) row_labels = ['US', 'AUS', 'JAP', 'IN', 'RU', 'MOR', 'EG'] print(cars) cars_per_cap country drives_right US 809 United States True AUS 731 Australia False JAP 588 Japan False IN 18 India False RU 200 Russia True MOR 70 Morocco True EG 45 Egypt True cars=pd.read_csv('cars.csv') print(cars) Unnamed: 0 cars_per_cap country drives_right 0 US 809 United States True 1 AUS 731 Australia False 2 JAP 588 Japan False 3 IN 18 India False 4 RU 200 Russia True 5 MOR 70 Morocco True 6 EG 45 Egypt True Specify the index_col argument inside pd.read_csv(): set it to 0, so that the first column is used as row labels. cars = pd.read_csv('cars.csv',index_col=0) print(cars) cars_per_cap country drives_right US 809 United States True AUS 731 Australia False JAP 588 Japan False IN 18 India False RU 200 Russia True MOR 70 Morocco True EG 45 Egypt True Use single square brackets to print out the country column of cars as a Pandas Series. Use double square brackets to print out the country column of cars as a Pandas DataFrame. # Print out country column as Pandas Series print(cars['country']) US United States AUS Australia JAP Japan IN India RU Russia MOR Morocco EG Egypt Name: country, dtype: object # Print out country column as Pandas DataFrame print(cars[['country']]) country US United States AUS Australia JAP Japan IN India RU Russia MOR Morocco EG Egypt # Print out DataFrame with country and drives_right columns print(cars[['country','drives_right'] country drives_right US United States True AUS Australia False JAP Japan False IN India False RU Russia True MOR Morocco True EG Egypt True","title":"Pandas"},{"location":"python/intermediate-python-for-data-science/dictionaries-and-pandas/#slicing","text":"print(cars[3:6]) cars_per_cap country drives_right IN 18 India False RU 200 Russia True MOR 70 Morocco True","title":"Slicing"},{"location":"python/intermediate-python-for-data-science/dictionaries-and-pandas/#loc-iloc","text":"print(cars.loc['JAP']) OR print(cars.iloc[2]) cars_per_cap 588 country Japan drives_right False Name: JAP, dtype: object print(cars.loc[['AUS','EG']]) OR print(cars.iloc[[1,6]]) cars_per_cap country drives_right AUS 731 Australia False EG 45 Egypt True print(cars.loc['MOR','drives_right']) True print(cars.loc[['RU','MOR'],['country','drives_right']]) country drives_right RU Russia True MOR Morocco True","title":"loc &amp; iloc"},{"location":"python/intermediate-python-for-data-science/hacker-statistics/","text":"Intermediate Python for Data Science Chapter 5 : Hacker Statistics Random Float np.random.seed(123) print(np.random.rand()) 0.6964691855978616 print(np.random.randint(1,7)) #prints a number between 1 to 7 (7 not included), number depends upon seed 6","title":"Intermediate Python for Data Science"},{"location":"python/intermediate-python-for-data-science/hacker-statistics/#intermediate-python-for-data-science","text":"","title":"Intermediate Python for Data Science"},{"location":"python/intermediate-python-for-data-science/hacker-statistics/#chapter-5-hacker-statistics","text":"","title":"Chapter 5 : Hacker Statistics"},{"location":"python/intermediate-python-for-data-science/hacker-statistics/#random-float","text":"np.random.seed(123) print(np.random.rand()) 0.6964691855978616 print(np.random.randint(1,7)) #prints a number between 1 to 7 (7 not included), number depends upon seed 6","title":"Random Float"},{"location":"python/intermediate-python-for-data-science/logic-control-flow%20and-filtering/","text":"Intermediate Python for Data Science Chapter 3 : Logic Control And Flow Comparison of Arrays my_house = np.array([18.0, 20.0, 10.75, 9.50]) your_house = np.array([14.0, 24.0, 14.25, 9.0]) print(my_house>=18) [ True True False False] print(my_house<your_house) [False True True False] Boolean operators with Numpy my_house = np.array([18.0, 20.0, 10.75, 9.50]) your_house = np.array([14.0, 24.0, 14.25, 9.0]) print(np.logical_or(my_house>18.5, my_house<10) [False True False True] print(np.logical_and(my_house<11, your_house<11)) [False False False True] Filtering Pandas DataFrame cars = pd.read_csv('cars.csv', index_col = 0) dr=cars[\"drives_right\"] print(dr) US True AUS False JAP False IN False RU True MOR True EG True Name: drives_right, dtype: bool sel=cars[dr] print(sel) cars_per_cap country drives_right US 809 United States True RU 200 Russia True MOR 70 Morocco True EG 45 Egypt True","title":"Intermediate Python for Data Science"},{"location":"python/intermediate-python-for-data-science/logic-control-flow%20and-filtering/#intermediate-python-for-data-science","text":"","title":"Intermediate Python for Data Science"},{"location":"python/intermediate-python-for-data-science/logic-control-flow%20and-filtering/#chapter-3-logic-control-and-flow","text":"","title":"Chapter 3 : Logic Control And Flow"},{"location":"python/intermediate-python-for-data-science/logic-control-flow%20and-filtering/#comparison-of-arrays","text":"my_house = np.array([18.0, 20.0, 10.75, 9.50]) your_house = np.array([14.0, 24.0, 14.25, 9.0]) print(my_house>=18) [ True True False False] print(my_house<your_house) [False True True False]","title":"Comparison of Arrays"},{"location":"python/intermediate-python-for-data-science/logic-control-flow%20and-filtering/#boolean-operators-with-numpy","text":"my_house = np.array([18.0, 20.0, 10.75, 9.50]) your_house = np.array([14.0, 24.0, 14.25, 9.0]) print(np.logical_or(my_house>18.5, my_house<10) [False True False True] print(np.logical_and(my_house<11, your_house<11)) [False False False True]","title":"Boolean operators with Numpy"},{"location":"python/intermediate-python-for-data-science/logic-control-flow%20and-filtering/#filtering-pandas-dataframe","text":"cars = pd.read_csv('cars.csv', index_col = 0) dr=cars[\"drives_right\"] print(dr) US True AUS False JAP False IN False RU True MOR True EG True Name: drives_right, dtype: bool sel=cars[dr] print(sel) cars_per_cap country drives_right US 809 United States True RU 200 Russia True MOR 70 Morocco True EG 45 Egypt True","title":"Filtering Pandas DataFrame"},{"location":"python/intermediate-python-for-data-science/loops/","text":"Intermediate Python for Data Science Chapter 4 : Loops Enumerate Function If you also want to access the index information, so where the list element you're iterating over is located, you can use enumerate() areas = [11.25, 18.0, 20.0, 10.75, 9.50] for index, a in enumerate(areas) : print(\"room \" + str(index) + \": \" + str(a)) room 0: 11.25 room 1: 18.0 room 2: 20.0 room 3: 10.75 room 4: 9.5 Loop over dictionary europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'austria':'vienna' } for x, y in europe.items() : print(\"the capital of \" + x + \" is \" + y) the capital of france is paris the capital of germany is berlin the capital of spain is madrid the capital of italy is rome the capital of poland is warsaw the capital of norway is oslo the capital of austria is vienna Loop over Numpy array for x in my_1d_array : ... for x in np.nditer(my_2d_array) : ... Column wise iteration for calls, row in cars.iterrows() : print(calls) print(row) for lab, row in cars.iterrows() : print(str(lab)+': '+str(row['cars_per_cap'])) US: 809 AUS: 731 JAP: 588 IN: 18 RU: 200 MOR: 70 EG: 45","title":"Intermediate Python for Data Science"},{"location":"python/intermediate-python-for-data-science/loops/#intermediate-python-for-data-science","text":"","title":"Intermediate Python for Data Science"},{"location":"python/intermediate-python-for-data-science/loops/#chapter-4-loops","text":"","title":"Chapter 4 : Loops"},{"location":"python/intermediate-python-for-data-science/loops/#enumerate-function","text":"If you also want to access the index information, so where the list element you're iterating over is located, you can use enumerate() areas = [11.25, 18.0, 20.0, 10.75, 9.50] for index, a in enumerate(areas) : print(\"room \" + str(index) + \": \" + str(a)) room 0: 11.25 room 1: 18.0 room 2: 20.0 room 3: 10.75 room 4: 9.5","title":"Enumerate Function"},{"location":"python/intermediate-python-for-data-science/loops/#loop-over-dictionary","text":"europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'austria':'vienna' } for x, y in europe.items() : print(\"the capital of \" + x + \" is \" + y) the capital of france is paris the capital of germany is berlin the capital of spain is madrid the capital of italy is rome the capital of poland is warsaw the capital of norway is oslo the capital of austria is vienna","title":"Loop over dictionary"},{"location":"python/intermediate-python-for-data-science/loops/#loop-over-numpy-array","text":"for x in my_1d_array : ... for x in np.nditer(my_2d_array) : ... Column wise iteration for calls, row in cars.iterrows() : print(calls) print(row) for lab, row in cars.iterrows() : print(str(lab)+': '+str(row['cars_per_cap'])) US: 809 AUS: 731 JAP: 588 IN: 18 RU: 200 MOR: 70 EG: 45","title":"Loop over Numpy array"},{"location":"python/intermediate-python-for-data-science/matplotlib/","text":"Intermediate Python for Data Science Chapter 1 : Matplotlib Matplotlib import matplotlib.pyplot as plt plt.plot(x,y) plt.show() ScatterPlot import matplotlib.pyplot as plt plt.scatter(x,y) plt.show() Histograms plt.hist(x,y) #y is numbe of bins plt.show() Labels plt.scatter(x,y) xlab = 'Description of X Axis' ylab = 'Description of Y Axis' title = 'Title of the Plot' plt.xlabel(xlab) plt.ylabel(ylab) plt.title(title) plt.show() Ticks tick_val = [1000,10000,100000] tick_lab = ['1k','10k','100k'] plt.xticks(tick_val,tick_lab) Size plt.scatter(x,y,s=number or list) Colors plt.scatter(x,y,c=color or list or dict,alpha=0-1) Aditional Customizations plt.text(x,y,'text') plt.grid(True) # to add a grid","title":"Intermediate Python for Data Science"},{"location":"python/intermediate-python-for-data-science/matplotlib/#intermediate-python-for-data-science","text":"","title":"Intermediate Python for Data Science"},{"location":"python/intermediate-python-for-data-science/matplotlib/#chapter-1-matplotlib","text":"","title":"Chapter 1 : Matplotlib"},{"location":"python/intermediate-python-for-data-science/matplotlib/#matplotlib","text":"import matplotlib.pyplot as plt plt.plot(x,y) plt.show()","title":"Matplotlib"},{"location":"python/intermediate-python-for-data-science/matplotlib/#scatterplot","text":"import matplotlib.pyplot as plt plt.scatter(x,y) plt.show()","title":"ScatterPlot"},{"location":"python/intermediate-python-for-data-science/matplotlib/#histograms","text":"plt.hist(x,y) #y is numbe of bins plt.show()","title":"Histograms"},{"location":"python/intermediate-python-for-data-science/matplotlib/#labels","text":"plt.scatter(x,y) xlab = 'Description of X Axis' ylab = 'Description of Y Axis' title = 'Title of the Plot' plt.xlabel(xlab) plt.ylabel(ylab) plt.title(title) plt.show()","title":"Labels"},{"location":"python/intermediate-python-for-data-science/matplotlib/#ticks","text":"tick_val = [1000,10000,100000] tick_lab = ['1k','10k','100k'] plt.xticks(tick_val,tick_lab)","title":"Ticks"},{"location":"python/intermediate-python-for-data-science/matplotlib/#size","text":"plt.scatter(x,y,s=number or list)","title":"Size"},{"location":"python/intermediate-python-for-data-science/matplotlib/#colors","text":"plt.scatter(x,y,c=color or list or dict,alpha=0-1)","title":"Colors"},{"location":"python/intermediate-python-for-data-science/matplotlib/#aditional-customizations","text":"plt.text(x,y,'text') plt.grid(True) # to add a grid","title":"Aditional Customizations"},{"location":"python/introduction-to-python/functions-and-packages/","text":"Functions Help function help(max) ?max Help on built-in function max in module builtins: max(...) max(iterable, [, default=obj, key=func]) -> value max(arg1, arg2, args, *[, key=func]) -> value With a single iterable argument, return its biggest item. The default keyword-only argument specifies an object to return if the provided iterable is empty. With two or more arguments, return the largest argument. Methods String Methods room = \"poolhouse\" Upper room_up=room.upper() print(room) print(room_up) poolhouse POOLHOUSE Count print(room.count(\"o\")) 3 List Methods areas = [11.25, 18.0, 20.0, 10.75, 9.50] Index print(areas.index(20.0)) 2 Count print(areas.count(14.5)) 0 Append areas.append(24.5) areas.append(15.45) print(areas) [11.25, 18.0, 20.0, 10.75, 9.5, 24.5, 15.45] Reverse areas.reverse() print(areas) [15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25] Remove areas.remove(24.5) print(areas) [15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25]","title":"Functions and Packages"},{"location":"python/introduction-to-python/functions-and-packages/#functions","text":"","title":"Functions"},{"location":"python/introduction-to-python/functions-and-packages/#help-function","text":"help(max) ?max Help on built-in function max in module builtins: max(...) max(iterable, [, default=obj, key=func]) -> value max(arg1, arg2, args, *[, key=func]) -> value With a single iterable argument, return its biggest item. The default keyword-only argument specifies an object to return if the provided iterable is empty. With two or more arguments, return the largest argument.","title":"Help function"},{"location":"python/introduction-to-python/functions-and-packages/#methods","text":"","title":"Methods"},{"location":"python/introduction-to-python/functions-and-packages/#string-methods","text":"room = \"poolhouse\"","title":"String Methods"},{"location":"python/introduction-to-python/functions-and-packages/#upper","text":"room_up=room.upper() print(room) print(room_up) poolhouse POOLHOUSE","title":"Upper"},{"location":"python/introduction-to-python/functions-and-packages/#count","text":"print(room.count(\"o\")) 3","title":"Count"},{"location":"python/introduction-to-python/functions-and-packages/#list-methods","text":"areas = [11.25, 18.0, 20.0, 10.75, 9.50]","title":"List Methods"},{"location":"python/introduction-to-python/functions-and-packages/#index","text":"print(areas.index(20.0)) 2","title":"Index"},{"location":"python/introduction-to-python/functions-and-packages/#count_1","text":"print(areas.count(14.5)) 0","title":"Count"},{"location":"python/introduction-to-python/functions-and-packages/#append","text":"areas.append(24.5) areas.append(15.45) print(areas) [11.25, 18.0, 20.0, 10.75, 9.5, 24.5, 15.45]","title":"Append"},{"location":"python/introduction-to-python/functions-and-packages/#reverse","text":"areas.reverse() print(areas) [15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25]","title":"Reverse"},{"location":"python/introduction-to-python/functions-and-packages/#remove","text":"areas.remove(24.5) print(areas) [15.45, 24.5, 9.5, 10.75, 20.0, 18.0, 11.25]","title":"Remove"},{"location":"python/introduction-to-python/numpy/","text":"baseball = [180, 215, 210, 210, 188, 176, 209, 200] import numpy as np np_baseball = np.array(baseball) print(np_baseball) [180 215 210 210 188 176 209 200] print(type(np_baseball)) <class 'numpy.ndarray'> x = [4 , 9 , 6, 3, 1] y = np.array(x) high = y > 5 print(high) [False True True False False] print(y[high]) [9,6] Addition of NumPy arrays A=np.array([1,2,3]) B=np.array([2,3,4]) A+B=np.array([3,5,7]) Mean A=np.array([1,2,3]) print(np.mean(A)) 2 Median A=np.array([1,2,3]) print(np.mean(A)) 2 Standard Deviation np.std(A) Correlation np.corrcoef(A[:,0],B[:,1])","title":"Numpy"},{"location":"python/introduction-to-python/numpy/#addition-of-numpy-arrays","text":"A=np.array([1,2,3]) B=np.array([2,3,4]) A+B=np.array([3,5,7])","title":"Addition of NumPy arrays"},{"location":"python/introduction-to-python/numpy/#mean","text":"A=np.array([1,2,3]) print(np.mean(A)) 2","title":"Mean"},{"location":"python/introduction-to-python/numpy/#median","text":"A=np.array([1,2,3]) print(np.mean(A)) 2","title":"Median"},{"location":"python/introduction-to-python/numpy/#standard-deviation","text":"np.std(A)","title":"Standard Deviation"},{"location":"python/introduction-to-python/numpy/#correlation","text":"np.corrcoef(A[:,0],B[:,1])","title":"Correlation"},{"location":"python/introduction-to-python/python-basics/","text":"print(7 + 10) 13 Why we use python You want to do some quick calculations. For your new business, you want to develop a database-driven website. Your boss asks you to clean and analyze the results of the latest satisfaction survey. Operators Operator Description Syntax + Addition: adds two operands x+y - Subtraction: subtracts two operands x-y * Multiplication: multiplies two operands x*y / Division (float): divides the first operand by the second x/y // Division (floor): divides the first operand by the second x//y % Modulus: returns the remainder when first operand is divided by the second x%y ****** Expnentiation : raises the number to its left to the power of the number to its right x****y Variables & Types a=1.0 print(type(a)) int() float() str() bool()","title":"Python Basics"},{"location":"python/introduction-to-python/python-basics/#why-we-use-python","text":"You want to do some quick calculations. For your new business, you want to develop a database-driven website. Your boss asks you to clean and analyze the results of the latest satisfaction survey.","title":"Why we use python"},{"location":"python/introduction-to-python/python-basics/#operators","text":"Operator Description Syntax + Addition: adds two operands x+y - Subtraction: subtracts two operands x-y * Multiplication: multiplies two operands x*y / Division (float): divides the first operand by the second x/y // Division (floor): divides the first operand by the second x//y % Modulus: returns the remainder when first operand is divided by the second x%y ****** Expnentiation : raises the number to its left to the power of the number to its right x****y","title":"Operators"},{"location":"python/introduction-to-python/python-basics/#variables-types","text":"a=1.0 print(type(a)) int() float() str() bool()","title":"Variables &amp; Types"},{"location":"python/introduction-to-python/python-lists/","text":"Indexing Start starts with 0 End starts with -1 Slicing of Lists A=['a','b','c','d','e','f'] print(A[1:3]) ['b','c'] print(A[2:]) ['c','d','e','f'] List Manipulation Replace list elements A=['a','b','c','d','e','f'] A[2]='g' print(A) ['a','b','g','d','e','f'] Extend a list A=['a','b','c'] B=['d','e','f'] print(A+B) ['a','b','g','d','e','f'] Delete list elements A=['a','b','c','d','e','f'] del(A[1]) print(A) ['a','c','d','e','f'] Inner workings of a list A=['a','b','c','d','e','f'] new_A = A[:] print(new_A) ['a','b','c','d','e','f']","title":"Python Lists"},{"location":"python/introduction-to-python/python-lists/#indexing","text":"Start starts with 0 End starts with -1","title":"Indexing"},{"location":"python/introduction-to-python/python-lists/#slicing-of-lists","text":"A=['a','b','c','d','e','f'] print(A[1:3]) ['b','c'] print(A[2:]) ['c','d','e','f']","title":"Slicing of Lists"},{"location":"python/introduction-to-python/python-lists/#list-manipulation","text":"","title":"List Manipulation"},{"location":"python/introduction-to-python/python-lists/#replace-list-elements","text":"A=['a','b','c','d','e','f'] A[2]='g' print(A) ['a','b','g','d','e','f']","title":"Replace list elements"},{"location":"python/introduction-to-python/python-lists/#extend-a-list","text":"A=['a','b','c'] B=['d','e','f'] print(A+B) ['a','b','g','d','e','f']","title":"Extend a list"},{"location":"python/introduction-to-python/python-lists/#delete-list-elements","text":"A=['a','b','c','d','e','f'] del(A[1]) print(A) ['a','c','d','e','f']","title":"Delete list elements"},{"location":"python/introduction-to-python/python-lists/#inner-workings-of-a-list","text":"A=['a','b','c','d','e','f'] new_A = A[:] print(new_A) ['a','b','c','d','e','f']","title":"Inner workings of a list"},{"location":"python/object-oriented-programming/introduction-to-object-oriented-programming/","text":"Object Oriented Programming Chapter 1 : Introduction to Object Oriented Programming Classes class Human: def __init__(self, name, gender): self.name = name self.gender = gender self.hairColor = random.choice('Black Brown') class Blob: def __init__(self, color): self.x = random.randrange(0, WIDTH) self.y = random.randrange(0, HEIGHT) self.size = random.randrange(4,8) self.color = color def move(self): self.move_x = random.randrange(-1,2) self.move_y = random.randrange(-1,2) self.x += self.move_x self.y += self.move_y def move(self): self.move_x = random.randrange(-1,2) self.move_y = random.randrange(-1,2) self.x += self.move_x self.y += self.move_y if self.x < 0: self.x = 0 elif self.x > WIDTH: self.x = WIDTH if self.y < 0: self.y = 0 elif self.y > HEIGHT: self.y = HEIGHT harsh = Human(name='Harsh', gender='Male')","title":"Object Oriented Programming"},{"location":"python/object-oriented-programming/introduction-to-object-oriented-programming/#object-oriented-programming","text":"","title":"Object Oriented Programming"},{"location":"python/object-oriented-programming/introduction-to-object-oriented-programming/#chapter-1-introduction-to-object-oriented-programming","text":"","title":"Chapter 1 : Introduction to Object Oriented Programming"},{"location":"python/object-oriented-programming/introduction-to-object-oriented-programming/#classes","text":"class Human: def __init__(self, name, gender): self.name = name self.gender = gender self.hairColor = random.choice('Black Brown')","title":"Classes"},{"location":"python/object-oriented-programming/introduction-to-object-oriented-programming/#_1","text":"class Blob: def __init__(self, color): self.x = random.randrange(0, WIDTH) self.y = random.randrange(0, HEIGHT) self.size = random.randrange(4,8) self.color = color def move(self): self.move_x = random.randrange(-1,2) self.move_y = random.randrange(-1,2) self.x += self.move_x self.y += self.move_y def move(self): self.move_x = random.randrange(-1,2) self.move_y = random.randrange(-1,2) self.x += self.move_x self.y += self.move_y if self.x < 0: self.x = 0 elif self.x > WIDTH: self.x = WIDTH if self.y < 0: self.y = 0 elif self.y > HEIGHT: self.y = HEIGHT","title":""},{"location":"python/object-oriented-programming/introduction-to-object-oriented-programming/#_2","text":"harsh = Human(name='Harsh', gender='Male')","title":""},{"location":"python/object-oriented-programming/introduction-to-object-oriented-programming/#_3","text":"","title":""},{"location":"python/object-oriented-programming/introduction-to-object-oriented-programming/#_4","text":"","title":""},{"location":"python/object-oriented-programming/introduction-to-object-oriented-programming/#_5","text":"","title":""},{"location":"python/object-oriented-programming/introduction-to-object-oriented-programming/#_6","text":"","title":""},{"location":"python/object-oriented-programming/introduction-to-object-oriented-programming/#_7","text":"","title":""},{"location":"python/python-data-science-toolbox-part-1/default-arguments-variable-length-arguments-and-scope/","text":"Python Data Science Toolbox (Part 1) Chapter 2 : Default arguments, variable-length arguments and scope Scope and user-defined functions num = 5 def func1(): num = 3 print(num) def func2(): global num double_num = num * 2 num = 6 print(double_num) print(num) print(num) func1() func2() print(num) 5 3 10 6 6 Nested Functions I def three_shouts(word1, word2, word3): def inner(word): return word + '!!!' return (inner(word1), inner(word2), inner(word3)) print(three_shouts('a', 'b', 'c')) ('a!!!', 'b!!!', 'c!!!') Nested Functions II def echo(n): def inner_echo(word1): echo_word = word1 * n return echo_word return inner_echo twice = echo(2) thrice = echo(3) print(twice('hello'), thrice('hello')) hellohello hellohellohello The keyword nonlocal and nested functions def echo_shout(word): echo_word=word+word print(echo_word) def shout(): nonlocal echo_word echo_word = echo_word+'!!!' shout() print(echo_word) echo_shout('hello') hellohello hellohello!!! def shout_echo(word1, echo=1): echo_word = word1*echo shout_word = echo_word + '!!!' return shout_word no_echo = shout_echo('Hey') with_echo = shout_echo('Hey',5) print(no_echo) print(with_echo) Hey!!! HeyHeyHeyHeyHey!!! Functions with variable-length arguments (*args) Flexible arguments enable you to pass a variable number of arguments to a function. def gibberish(*args): hodgepodge='' for word in args: hodgepodge += word return hodgepodge one_word = gibberish('luke') many_words = gibberish(\"luke\", \"leia\", \"han\", \"obi\", \"darth\") print(one_word) print(many_words) luke lukeleiahanobidarth Functions with variable-length keyword arguments ( kwargs) What makes **kwargs different is that it allows you to pass a variable number of keyword arguments to functions. # Define report_status def report_status(**kwargs): print(\"\\nBEGIN: REPORT\\n\") for key, value in kwargs.items(): print(key + \": \" + value) print(\"\\nEND REPORT\") report_status(name=\"luke\", affiliation=\"jedi\", status=\"missing\") report_status(name='anakin', affiliation='sith lord', status='deceased') BEGIN: REPORT name: luke affiliation: jedi status: missing END REPORT BEGIN: REPORT name: anakin affiliation: sith lord status: deceased END REPORT","title":"Python Data Science Toolbox (Part 1)"},{"location":"python/python-data-science-toolbox-part-1/default-arguments-variable-length-arguments-and-scope/#python-data-science-toolbox-part-1","text":"","title":"Python Data Science Toolbox (Part 1)"},{"location":"python/python-data-science-toolbox-part-1/default-arguments-variable-length-arguments-and-scope/#chapter-2-default-arguments-variable-length-arguments-and-scope","text":"","title":"Chapter 2 : Default arguments, variable-length arguments and scope"},{"location":"python/python-data-science-toolbox-part-1/default-arguments-variable-length-arguments-and-scope/#scope-and-user-defined-functions","text":"num = 5 def func1(): num = 3 print(num) def func2(): global num double_num = num * 2 num = 6 print(double_num) print(num) print(num) func1() func2() print(num) 5 3 10 6 6","title":"Scope and user-defined functions"},{"location":"python/python-data-science-toolbox-part-1/default-arguments-variable-length-arguments-and-scope/#nested-functions-i","text":"def three_shouts(word1, word2, word3): def inner(word): return word + '!!!' return (inner(word1), inner(word2), inner(word3)) print(three_shouts('a', 'b', 'c')) ('a!!!', 'b!!!', 'c!!!')","title":"Nested Functions I"},{"location":"python/python-data-science-toolbox-part-1/default-arguments-variable-length-arguments-and-scope/#nested-functions-ii","text":"def echo(n): def inner_echo(word1): echo_word = word1 * n return echo_word return inner_echo twice = echo(2) thrice = echo(3) print(twice('hello'), thrice('hello')) hellohello hellohellohello","title":"Nested Functions II"},{"location":"python/python-data-science-toolbox-part-1/default-arguments-variable-length-arguments-and-scope/#the-keyword-nonlocal-and-nested-functions","text":"def echo_shout(word): echo_word=word+word print(echo_word) def shout(): nonlocal echo_word echo_word = echo_word+'!!!' shout() print(echo_word) echo_shout('hello') hellohello hellohello!!! def shout_echo(word1, echo=1): echo_word = word1*echo shout_word = echo_word + '!!!' return shout_word no_echo = shout_echo('Hey') with_echo = shout_echo('Hey',5) print(no_echo) print(with_echo) Hey!!! HeyHeyHeyHeyHey!!!","title":"The keyword nonlocal and nested functions"},{"location":"python/python-data-science-toolbox-part-1/default-arguments-variable-length-arguments-and-scope/#functions-with-variable-length-arguments-args","text":"Flexible arguments enable you to pass a variable number of arguments to a function. def gibberish(*args): hodgepodge='' for word in args: hodgepodge += word return hodgepodge one_word = gibberish('luke') many_words = gibberish(\"luke\", \"leia\", \"han\", \"obi\", \"darth\") print(one_word) print(many_words) luke lukeleiahanobidarth","title":"Functions with variable-length arguments (*args)"},{"location":"python/python-data-science-toolbox-part-1/default-arguments-variable-length-arguments-and-scope/#functions-with-variable-length-keyword-arguments-kwargs","text":"What makes **kwargs different is that it allows you to pass a variable number of keyword arguments to functions. # Define report_status def report_status(**kwargs): print(\"\\nBEGIN: REPORT\\n\") for key, value in kwargs.items(): print(key + \": \" + value) print(\"\\nEND REPORT\") report_status(name=\"luke\", affiliation=\"jedi\", status=\"missing\") report_status(name='anakin', affiliation='sith lord', status='deceased') BEGIN: REPORT name: luke affiliation: jedi status: missing END REPORT BEGIN: REPORT name: anakin affiliation: sith lord status: deceased END REPORT","title":"Functions with variable-length keyword arguments (kwargs)"},{"location":"python/python-data-science-toolbox-part-1/lambda-functions-and-error-handling/","text":"Python Data Science Toolbox (Part 1) Chapter 3 : Lambda functions and error-handling Lambda Functions add_bangs = (lambda a: a + '!!!') add_bangs('hello') hello!!! echo_word = (lambda word1,echo:word1*echo) result = echo_word('hey',5) print(result) heyheyheyheyhey Map() and lambda functions map() applies a function over an object, such as a list. spells = [\"protego\", \"accio\", \"expecto patronum\", \"legilimens\"] shout_spells= map(lambda item : item+'!!!', spells) shout_spells_list=list(shout_spells) print(shout_spells) print(shout_spells_list) ['protego!!!', 'accio!!!', 'expecto patronum!!!', 'legilimens!!!'] Filter() and lambda functions The function filter() offers a way to filter out elements from a list that don't satisfy certain criteria. fellowship = ['frodo', 'samwise', 'merry', 'pippin', 'aragorn', 'boromir', 'legolas', 'gimli', 'gandalf'] result = filter(lambda member:len(member)>6, fellowship) result_list=list(result) print(result) print(result_list) ['samwise', 'aragorn', 'boromir', 'legolas', 'gandalf'] Reduce() and lambda functions The reduce() function is useful for performing some computation on a list and, unlike map() and filter(), returns a single value as a result. To use reduce(), you must import it from the functools module. from functools import reduce stark = ['robb', 'sansa', 'arya', 'brandon', 'rickon'] result = reduce(lambda item1,item2:item1+item2, stark) print(result) 'robbsansaaryabrandonrickon' Introduction to error handling def shout_echo(word1, echo=1): echo_word='' shout_words='' try: echo_word = word1*echo shout_words = echo_word+'!!!' except: print(\"word1 must be a string and echo must be an integer.\") return shout_words shout_echo(\"particle\", echo=\"accelerator\") word1 must be a string and echo must be an integer. # Define shout_echo def shout_echo(word1, echo=1): if echo<0: raise ValueError('echo must be greater than 0') echo_word = word1 * echo shout_word = echo_word + '!!!' return shout_word shout_echo(\"particle\", echo=5) 'particleparticleparticleparticleparticle!!!'","title":"Python Data Science Toolbox (Part 1)"},{"location":"python/python-data-science-toolbox-part-1/lambda-functions-and-error-handling/#python-data-science-toolbox-part-1","text":"","title":"Python Data Science Toolbox (Part 1)"},{"location":"python/python-data-science-toolbox-part-1/lambda-functions-and-error-handling/#chapter-3-lambda-functions-and-error-handling","text":"","title":"Chapter 3 : Lambda functions and error-handling"},{"location":"python/python-data-science-toolbox-part-1/lambda-functions-and-error-handling/#lambda-functions","text":"add_bangs = (lambda a: a + '!!!') add_bangs('hello') hello!!! echo_word = (lambda word1,echo:word1*echo) result = echo_word('hey',5) print(result) heyheyheyheyhey","title":"Lambda Functions"},{"location":"python/python-data-science-toolbox-part-1/lambda-functions-and-error-handling/#map-and-lambda-functions","text":"map() applies a function over an object, such as a list. spells = [\"protego\", \"accio\", \"expecto patronum\", \"legilimens\"] shout_spells= map(lambda item : item+'!!!', spells) shout_spells_list=list(shout_spells) print(shout_spells) print(shout_spells_list) ['protego!!!', 'accio!!!', 'expecto patronum!!!', 'legilimens!!!']","title":"Map() and lambda functions"},{"location":"python/python-data-science-toolbox-part-1/lambda-functions-and-error-handling/#filter-and-lambda-functions","text":"The function filter() offers a way to filter out elements from a list that don't satisfy certain criteria. fellowship = ['frodo', 'samwise', 'merry', 'pippin', 'aragorn', 'boromir', 'legolas', 'gimli', 'gandalf'] result = filter(lambda member:len(member)>6, fellowship) result_list=list(result) print(result) print(result_list) ['samwise', 'aragorn', 'boromir', 'legolas', 'gandalf']","title":"Filter() and lambda functions"},{"location":"python/python-data-science-toolbox-part-1/lambda-functions-and-error-handling/#reduce-and-lambda-functions","text":"The reduce() function is useful for performing some computation on a list and, unlike map() and filter(), returns a single value as a result. To use reduce(), you must import it from the functools module. from functools import reduce stark = ['robb', 'sansa', 'arya', 'brandon', 'rickon'] result = reduce(lambda item1,item2:item1+item2, stark) print(result) 'robbsansaaryabrandonrickon'","title":"Reduce() and lambda functions"},{"location":"python/python-data-science-toolbox-part-1/lambda-functions-and-error-handling/#introduction-to-error-handling","text":"def shout_echo(word1, echo=1): echo_word='' shout_words='' try: echo_word = word1*echo shout_words = echo_word+'!!!' except: print(\"word1 must be a string and echo must be an integer.\") return shout_words shout_echo(\"particle\", echo=\"accelerator\") word1 must be a string and echo must be an integer. # Define shout_echo def shout_echo(word1, echo=1): if echo<0: raise ValueError('echo must be greater than 0') echo_word = word1 * echo shout_word = echo_word + '!!!' return shout_word shout_echo(\"particle\", echo=5) 'particleparticleparticleparticleparticle!!!'","title":"Introduction to error handling"},{"location":"python/python-data-science-toolbox-part-1/writing-your-own-functions/","text":"Python Data Science Toolbox (Part 1) Chapter 1 : Writing your own functions Strings in Python object1 = \"data\" + \"analysis\" + \"visualization\" object2 = 1 * 3 object3 = \"1\" * 3 object1 contains \"dataanalysisvisualization\", object2 contains 3, object3 contains \"111\" Write a simple function def shout(): shout_word='congratulations'+'!!!' print(shout_word) shout() congratulations!!! Single-parameter functions def shout(word): shout_word = word + '!!!' print(shout_word) shout('congratulations') congratulations!!! Functions that return single values def shout(word): shout_word=word+'!!!' return shout_word yell=shout('congratulations') print(yell) congratulations!!! Functions with multiple parameters def shout(word1, word2): shout1=word1+'!!!' shout2=word2+'!!!' new_shout=shout1+shout2 return new_shout yell=shout('congratulations','you') print(yell) congratulations!!!you!!! A brief introduction to tuples nums=(3,4,6) num1,num2,num3=nums even_nums=(2,num2,num3) print(even_nums) (2,4,6) Functions that return multiple values def shout_all(word1, word2): shout1=word1+'!!!' shout2=word2+'!!!' shout_words=(shout1,shout2) return shout_words yell1,yell2 = shout_all('congratulations','you') print(yell1) print(yell2) congratulations!!! you!!!","title":"Python Data Science Toolbox (Part 1)"},{"location":"python/python-data-science-toolbox-part-1/writing-your-own-functions/#python-data-science-toolbox-part-1","text":"","title":"Python Data Science Toolbox (Part 1)"},{"location":"python/python-data-science-toolbox-part-1/writing-your-own-functions/#chapter-1-writing-your-own-functions","text":"","title":"Chapter 1 : Writing your own functions"},{"location":"python/python-data-science-toolbox-part-1/writing-your-own-functions/#strings-in-python","text":"object1 = \"data\" + \"analysis\" + \"visualization\" object2 = 1 * 3 object3 = \"1\" * 3 object1 contains \"dataanalysisvisualization\", object2 contains 3, object3 contains \"111\"","title":"Strings in Python"},{"location":"python/python-data-science-toolbox-part-1/writing-your-own-functions/#write-a-simple-function","text":"def shout(): shout_word='congratulations'+'!!!' print(shout_word) shout() congratulations!!!","title":"Write a simple function"},{"location":"python/python-data-science-toolbox-part-1/writing-your-own-functions/#single-parameter-functions","text":"def shout(word): shout_word = word + '!!!' print(shout_word) shout('congratulations') congratulations!!!","title":"Single-parameter functions"},{"location":"python/python-data-science-toolbox-part-1/writing-your-own-functions/#functions-that-return-single-values","text":"def shout(word): shout_word=word+'!!!' return shout_word yell=shout('congratulations') print(yell) congratulations!!!","title":"Functions that return single values"},{"location":"python/python-data-science-toolbox-part-1/writing-your-own-functions/#functions-with-multiple-parameters","text":"def shout(word1, word2): shout1=word1+'!!!' shout2=word2+'!!!' new_shout=shout1+shout2 return new_shout yell=shout('congratulations','you') print(yell) congratulations!!!you!!!","title":"Functions with multiple parameters"},{"location":"python/python-data-science-toolbox-part-1/writing-your-own-functions/#a-brief-introduction-to-tuples","text":"nums=(3,4,6) num1,num2,num3=nums even_nums=(2,num2,num3) print(even_nums) (2,4,6)","title":"A brief introduction to tuples"},{"location":"python/python-data-science-toolbox-part-1/writing-your-own-functions/#functions-that-return-multiple-values","text":"def shout_all(word1, word2): shout1=word1+'!!!' shout2=word2+'!!!' shout_words=(shout1,shout2) return shout_words yell1,yell2 = shout_all('congratulations','you') print(yell1) print(yell2) congratulations!!! you!!!","title":"Functions that return multiple values"},{"location":"python/python-data-science-toolbox-part-2/bringing-it-all-together/","text":"Python Data Science Toolbox (Part 2) Chapter 3 : Bringing it all together!","title":"Python Data Science Toolbox (Part 2)"},{"location":"python/python-data-science-toolbox-part-2/bringing-it-all-together/#python-data-science-toolbox-part-2","text":"","title":"Python Data Science Toolbox (Part 2)"},{"location":"python/python-data-science-toolbox-part-2/bringing-it-all-together/#chapter-3-bringing-it-all-together","text":"","title":"Chapter 3 : Bringing it all together!"},{"location":"python/python-data-science-toolbox-part-2/list-comprehensions-and-generators/","text":"Python Data Science Toolbox (Part 2) Chapter 2 : List comprehensions and generators","title":"Python Data Science Toolbox (Part 2)"},{"location":"python/python-data-science-toolbox-part-2/list-comprehensions-and-generators/#python-data-science-toolbox-part-2","text":"","title":"Python Data Science Toolbox (Part 2)"},{"location":"python/python-data-science-toolbox-part-2/list-comprehensions-and-generators/#chapter-2-list-comprehensions-and-generators","text":"","title":"Chapter 2 : List comprehensions and generators"},{"location":"python/python-data-science-toolbox-part-2/using-iterators-in-pythonland/","text":"Python Data Science Toolbox (Part 2) Chapter 1 : Using iterators in PythonLand","title":"Python Data Science Toolbox (Part 2)"},{"location":"python/python-data-science-toolbox-part-2/using-iterators-in-pythonland/#python-data-science-toolbox-part-2","text":"","title":"Python Data Science Toolbox (Part 2)"},{"location":"python/python-data-science-toolbox-part-2/using-iterators-in-pythonland/#chapter-1-using-iterators-in-pythonland","text":"","title":"Chapter 1 : Using iterators in PythonLand"},{"location":"python/python-data-science-toolbox-part-3/argparse-timeit-module-and-zip/","text":"Python Data Science Toolbox Part 3 Chapter 1 : Argparse , Timeit module and Zip Argparse import argparse import sys def main(): parser = argparse.ArgumentParser() parser.add_argument('--x', type=float, default=1.0, help='What is the first number?') parser.add_argument('--y', type=float, default=1.0, help='What is the second number?') parser.add_argument('--operation', type=str, default='add', help='What operation? Can choose add, sub, mul, or div') args = parser.parse_args() sys.stdout.write(str(calc(args))) def calc(args): if args.operation == 'add': return args.x + args.y elif args.operation == 'sub': return args.x - args.y elif args.operation == 'mul': return args.x * args.y elif args.operation == 'div': return args.x / args.y if __name__ == '__main__': main() python argparse_example.py --x=5 --y=3 --operation=mul 15.0 python argparse_example.py -h usage: argparse_example.py [-h] [--x X] [--y Y] [--operation OPERATION] optional arguments: -h, --help show this help message and exit --x X What is the first number? --y Y What is the second number? --operation OPERATION What operation? Can choose add, sub, mul, or div Timeit Module This tells us how long it took to run 500,000 iterations of 1+3 import timeit print(timeit.timeit('1+3', number=500000)) 0.006161588492280894 For Generator print(timeit.timeit('''input_list = range(100) def div_by_two(num): if (num/2).is_integer(): return True else: return False # generator: xyz = i for i in input_list if div_by_two(i) ''', number=50000)) 0.03889649630650638 For List Comprehension print(timeit.timeit('''input_list = range(100) def div_by_two(num): if (num/2).is_integer(): return True else: return False # generator: xyz = [i for i in input_list if div_by_two(i)]''', number=50000)) 1.5278349260021287 Zip function x = [1,2,3,4] y = [7,8,3,2] z = ['a','b','c','d'] for a,b,c in zip(x,y,z): print(a,b,c) print(zip(x,y,z)) 1 7 a 2 8 b 3 3 c 4 2 d for i in zip(x,y,z): print(i) (1, 7, 'a') (2, 8, 'b') (3, 3, 'c') (4, 2, 'd') names = ['Jill','Jack','Jeb','Jessica'] grades = [99,56,24,87] d = dict(zip(names,grades)) print(d) {'Jeb': 24, 'Jack': 56, 'Jessica': 87, 'Jill': 99}","title":"Python Data Science Toolbox Part 3"},{"location":"python/python-data-science-toolbox-part-3/argparse-timeit-module-and-zip/#python-data-science-toolbox-part-3","text":"","title":"Python Data Science Toolbox Part 3"},{"location":"python/python-data-science-toolbox-part-3/argparse-timeit-module-and-zip/#chapter-1-argparse-timeit-module-and-zip","text":"","title":"Chapter 1 : Argparse , Timeit module and Zip"},{"location":"python/python-data-science-toolbox-part-3/argparse-timeit-module-and-zip/#argparse","text":"import argparse import sys def main(): parser = argparse.ArgumentParser() parser.add_argument('--x', type=float, default=1.0, help='What is the first number?') parser.add_argument('--y', type=float, default=1.0, help='What is the second number?') parser.add_argument('--operation', type=str, default='add', help='What operation? Can choose add, sub, mul, or div') args = parser.parse_args() sys.stdout.write(str(calc(args))) def calc(args): if args.operation == 'add': return args.x + args.y elif args.operation == 'sub': return args.x - args.y elif args.operation == 'mul': return args.x * args.y elif args.operation == 'div': return args.x / args.y if __name__ == '__main__': main() python argparse_example.py --x=5 --y=3 --operation=mul 15.0 python argparse_example.py -h usage: argparse_example.py [-h] [--x X] [--y Y] [--operation OPERATION] optional arguments: -h, --help show this help message and exit --x X What is the first number? --y Y What is the second number? --operation OPERATION What operation? Can choose add, sub, mul, or div","title":"Argparse"},{"location":"python/python-data-science-toolbox-part-3/argparse-timeit-module-and-zip/#timeit-module","text":"This tells us how long it took to run 500,000 iterations of 1+3 import timeit print(timeit.timeit('1+3', number=500000)) 0.006161588492280894","title":"Timeit Module"},{"location":"python/python-data-science-toolbox-part-3/argparse-timeit-module-and-zip/#for-generator","text":"print(timeit.timeit('''input_list = range(100) def div_by_two(num): if (num/2).is_integer(): return True else: return False # generator: xyz = i for i in input_list if div_by_two(i) ''', number=50000)) 0.03889649630650638","title":"For Generator"},{"location":"python/python-data-science-toolbox-part-3/argparse-timeit-module-and-zip/#for-list-comprehension","text":"print(timeit.timeit('''input_list = range(100) def div_by_two(num): if (num/2).is_integer(): return True else: return False # generator: xyz = [i for i in input_list if div_by_two(i)]''', number=50000)) 1.5278349260021287","title":"For List Comprehension"},{"location":"python/python-data-science-toolbox-part-3/argparse-timeit-module-and-zip/#zip-function","text":"x = [1,2,3,4] y = [7,8,3,2] z = ['a','b','c','d'] for a,b,c in zip(x,y,z): print(a,b,c) print(zip(x,y,z)) 1 7 a 2 8 b 3 3 c 4 2 d for i in zip(x,y,z): print(i) (1, 7, 'a') (2, 8, 'b') (3, 3, 'c') (4, 2, 'd') names = ['Jill','Jack','Jeb','Jessica'] grades = [99,56,24,87] d = dict(zip(names,grades)) print(d) {'Jeb': 24, 'Jack': 56, 'Jessica': 87, 'Jill': 99}","title":"Zip function"},{"location":"python/python-data-science-toolbox-part-3/multiprocessing/","text":"Python Data Science Toolbox Part 3 Chapter 2 : Multiprocessing Simplified Explanation on Multiprocessing Multiprocessing import multiprocessing def spawn(num): print(f'Spawned {num}') if __name__ == '__main__': for i in range(5): p = multiprocessing.Process(target=spawn, args=(i,)) p.start() p.join() Spawn 0 Spawn 1 Spawn 2 Spawn 3 Spawn 4 The .join is the culprit here. It's waiting for the process to end. import multiprocessing def spawn(num): print(f'Spawned {num}'') if __name__ == '__main__': for i in range(5): p = multiprocessing.Process(target=spawn, args=(i,)) p.start() Spawn 2 Spawn 3 Spawn 1 Spawn 0 Spawn 4 If I change the range to 500, I go 0 to 100 real quick. You should also clearly see a bunch of Python processes spawning in your process lists. Remember .join if you actually need to wait on a process. If you don't need to wait, then obviously you don't want to be using it. Getting Values from Multiprocessing Processes from multiprocessing import Pool def job(num): return num * 2 if __name__ == '__main__': p = Pool(processes=20) data = p.map(job, [i for i in range(20)]) p.close() print(data) [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]","title":"Python Data Science Toolbox Part 3"},{"location":"python/python-data-science-toolbox-part-3/multiprocessing/#python-data-science-toolbox-part-3","text":"","title":"Python Data Science Toolbox Part 3"},{"location":"python/python-data-science-toolbox-part-3/multiprocessing/#chapter-2-multiprocessing","text":"Simplified Explanation on Multiprocessing","title":"Chapter 2 : Multiprocessing"},{"location":"python/python-data-science-toolbox-part-3/multiprocessing/#multiprocessing","text":"import multiprocessing def spawn(num): print(f'Spawned {num}') if __name__ == '__main__': for i in range(5): p = multiprocessing.Process(target=spawn, args=(i,)) p.start() p.join() Spawn 0 Spawn 1 Spawn 2 Spawn 3 Spawn 4 The .join is the culprit here. It's waiting for the process to end. import multiprocessing def spawn(num): print(f'Spawned {num}'') if __name__ == '__main__': for i in range(5): p = multiprocessing.Process(target=spawn, args=(i,)) p.start() Spawn 2 Spawn 3 Spawn 1 Spawn 0 Spawn 4 If I change the range to 500, I go 0 to 100 real quick. You should also clearly see a bunch of Python processes spawning in your process lists. Remember .join if you actually need to wait on a process. If you don't need to wait, then obviously you don't want to be using it.","title":"Multiprocessing"},{"location":"python/python-data-science-toolbox-part-3/multiprocessing/#getting-values-from-multiprocessing-processes","text":"from multiprocessing import Pool def job(num): return num * 2 if __name__ == '__main__': p = Pool(processes=20) data = p.map(job, [i for i in range(20)]) p.close() print(data) [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]","title":"Getting Values from Multiprocessing Processes"},{"location":"spreadsheets/","text":"Spreadsheets Course Basics =121+21 142 Mathematics + - * / ^ Percentages = 2 * 21% Comparison Operators <, >: smaller/greater than <=, >=: smaller/greater than or equal to =, <>: equal/not equal to Text '23 = 23 in text Formatting Format > Number > More formats Absolute references $A$12 What IS*() the data type? =ISTEXT() =ISNUMBER() =ISDATE() =ISLOGICAL() =ISURL() =ISFORMULA() =ISBLANK() Coversion =N() =TO_PERCENT() =CONVERT(A2, \"sec\", \"min\") Logarthmic Transformations =LOG10() =LN() Exponential transformations =EXP() =POW(2,CELL) Square and square root transformations =SQRT() Min and Max =MIN(Range) =MAX(Range) Mean and Median =SUM(Range) =AVERAGE(Range) =MEDIAN(Range) Rank =RANK(value, Range, [is_ascending]) Right and Left =RIGHT(Beauty and the Beast (2017),4) = 017) =LEFT(Star Wars: The Last Jedi,3) = Sta Length and Search =LEN() =SEARCH(\" \", cell) Concatenate =CONCATENATE(value1, value2, value3, ....) Weekday =WEEKDAY(date, [type]): evaluates to the day of the week of a date. type is 1, 2 or 3. type = 1: Sunday is day 1 and Saturday is day 7 (default) type = 2: Monday is day 1 and Sunday is day 7 type = 3: Monday is day 0 and Sunday is day 6 =DATEDIF(start_date, end_date, unit) \"Y\": the number of years between two dates \"M\": the number of months between two dates \"D\": the number of days between two dates Rounding numbers ROUND(x, n) rounds x to the nearest n decimal places. CEILING(x, y) rounds x up to the nearest multiple of y. FLOOR(x, y) rounds x down to the nearest multiple of y. =ROUND(0.746, 1) = 0.7 =ROUND(325, -2) = 300 =FLOOR(1.0985) = 1 =FLOOR(1.0985, 0.01) = 1.09 =CEILING(0.7461, 0.1) = 0.8 FLOOR(-1.5) is -2 and CEILING(-1.5) is -1 Google Sheets has two related functions called FLOOR.MATH() and CEILING.MATH(). When given one or two arguments, they behave in the same way as FLOOR() and CEILING() respectively. However, you can pass the value 1 to a third argument to make them round towards or away from zero. That is, FLOOR.MATH(-1.5, , 1) is -1 and CEILING.MATH(-1.5, , 1) is -2 Random Numbers =RAND() =RANDBETWEEN(lo, hi) =NORMINV(RAND(), 3, 2) mean 3 and standard deviation 2 Logical Operations =NOT() =AND() =OR() Flow Control =IF(condition, this op if condition true, else this op) =IFS(condition1, op1, condition2, op2, .....conditionN, opN) =SWITCH(Range, \"value1\", opValue1, \"value2\", opValue2, ....) Blanks, missing values, & errors Error Cause DIV/0! Dividing by zero. VALUE! Nonsense data in a calculation. REF! Referencing a cell that has been deleted. NAME? Forgetting to quote a string. NUM! Numbers being out of range. N/A Missing value. ERROR! Syntax problem in a formula. =ISBLANK() =COUNTBLANK(Range) =NA() = #N/A =ISERROR() =ISERR() Cell Addresses =ROW() =COLUMN() =ADDRESS(H5, I5) Absolute =ADDRESS(H5, I5, 4) Relative =INDIRECT() =OFFSET(cell_reference, offset_rows, offset_columns, [height], [width]) =INDEX(Range, row, column) Lookups & matching =VLOOKUP(search_key, range, index, [is_sorted]) =SORT(range, sort_column, is_ascending, [sort_column2, ...], [is_ascending2, ...]) =MATCH(search_key, range, [search_type]) =UNIQUE(Range) =COUNTIF(Range,value) =COUNTIFS(Range1, value1, Range2, value2...) =SUMIF(Range1, value1 in Range1, Range2) = Sum of values coresponding to value1 in Range2 =AVERAGEIF(Range1, value1 in Range1, Range2) = Average of values coresponding to value1 in Range2","title":"Spreadsheets Course"},{"location":"spreadsheets/#spreadsheets-course","text":"","title":"Spreadsheets Course"},{"location":"spreadsheets/#basics","text":"=121+21 142","title":"Basics"},{"location":"spreadsheets/#mathematics","text":"+ - * / ^","title":"Mathematics"},{"location":"spreadsheets/#percentages","text":"= 2 * 21%","title":"Percentages"},{"location":"spreadsheets/#comparison-operators","text":"<, >: smaller/greater than <=, >=: smaller/greater than or equal to =, <>: equal/not equal to","title":"Comparison Operators"},{"location":"spreadsheets/#text","text":"'23 = 23 in text","title":"Text"},{"location":"spreadsheets/#formatting","text":"Format > Number > More formats","title":"Formatting"},{"location":"spreadsheets/#absolute-references","text":"$A$12","title":"Absolute references"},{"location":"spreadsheets/#what-is-the-data-type","text":"=ISTEXT() =ISNUMBER() =ISDATE() =ISLOGICAL() =ISURL() =ISFORMULA() =ISBLANK()","title":"What IS*() the data type?"},{"location":"spreadsheets/#coversion","text":"=N() =TO_PERCENT() =CONVERT(A2, \"sec\", \"min\")","title":"Coversion"},{"location":"spreadsheets/#logarthmic-transformations","text":"=LOG10() =LN()","title":"Logarthmic Transformations"},{"location":"spreadsheets/#exponential-transformations","text":"=EXP() =POW(2,CELL)","title":"Exponential transformations"},{"location":"spreadsheets/#square-and-square-root-transformations","text":"=SQRT()","title":"Square and square root transformations"},{"location":"spreadsheets/#min-and-max","text":"=MIN(Range) =MAX(Range)","title":"Min and Max"},{"location":"spreadsheets/#mean-and-median","text":"=SUM(Range) =AVERAGE(Range) =MEDIAN(Range)","title":"Mean and Median"},{"location":"spreadsheets/#rank","text":"=RANK(value, Range, [is_ascending])","title":"Rank"},{"location":"spreadsheets/#right-and-left","text":"=RIGHT(Beauty and the Beast (2017),4) = 017) =LEFT(Star Wars: The Last Jedi,3) = Sta","title":"Right and Left"},{"location":"spreadsheets/#length-and-search","text":"=LEN() =SEARCH(\" \", cell)","title":"Length and Search"},{"location":"spreadsheets/#concatenate","text":"=CONCATENATE(value1, value2, value3, ....)","title":"Concatenate"},{"location":"spreadsheets/#weekday","text":"=WEEKDAY(date, [type]): evaluates to the day of the week of a date. type is 1, 2 or 3. type = 1: Sunday is day 1 and Saturday is day 7 (default) type = 2: Monday is day 1 and Sunday is day 7 type = 3: Monday is day 0 and Sunday is day 6 =DATEDIF(start_date, end_date, unit) \"Y\": the number of years between two dates \"M\": the number of months between two dates \"D\": the number of days between two dates","title":"Weekday"},{"location":"spreadsheets/#rounding-numbers","text":"ROUND(x, n) rounds x to the nearest n decimal places. CEILING(x, y) rounds x up to the nearest multiple of y. FLOOR(x, y) rounds x down to the nearest multiple of y. =ROUND(0.746, 1) = 0.7 =ROUND(325, -2) = 300 =FLOOR(1.0985) = 1 =FLOOR(1.0985, 0.01) = 1.09 =CEILING(0.7461, 0.1) = 0.8 FLOOR(-1.5) is -2 and CEILING(-1.5) is -1 Google Sheets has two related functions called FLOOR.MATH() and CEILING.MATH(). When given one or two arguments, they behave in the same way as FLOOR() and CEILING() respectively. However, you can pass the value 1 to a third argument to make them round towards or away from zero. That is, FLOOR.MATH(-1.5, , 1) is -1 and CEILING.MATH(-1.5, , 1) is -2","title":"Rounding numbers"},{"location":"spreadsheets/#random-numbers","text":"=RAND() =RANDBETWEEN(lo, hi) =NORMINV(RAND(), 3, 2) mean 3 and standard deviation 2","title":"Random Numbers"},{"location":"spreadsheets/#logical-operations","text":"=NOT() =AND() =OR()","title":"Logical Operations"},{"location":"spreadsheets/#flow-control","text":"=IF(condition, this op if condition true, else this op) =IFS(condition1, op1, condition2, op2, .....conditionN, opN) =SWITCH(Range, \"value1\", opValue1, \"value2\", opValue2, ....)","title":"Flow Control"},{"location":"spreadsheets/#blanks-missing-values-errors","text":"Error Cause","title":"Blanks, missing values, &amp; errors"},{"location":"spreadsheets/#div0-dividing-by-zero","text":"","title":"DIV/0! Dividing by zero. "},{"location":"spreadsheets/#value-nonsense-data-in-a-calculation","text":"","title":"VALUE! Nonsense data in a calculation. "},{"location":"spreadsheets/#ref-referencing-a-cell-that-has-been-deleted","text":"","title":"REF!   Referencing a cell that has been deleted. "},{"location":"spreadsheets/#name-forgetting-to-quote-a-string","text":"","title":"NAME?  Forgetting to quote a string. "},{"location":"spreadsheets/#num-numbers-being-out-of-range","text":"","title":"NUM!   Numbers being out of range. "},{"location":"spreadsheets/#na-missing-value","text":"","title":"N/A    Missing value. "},{"location":"spreadsheets/#error-syntax-problem-in-a-formula","text":"=ISBLANK() =COUNTBLANK(Range) =NA() = #N/A =ISERROR() =ISERR()","title":"ERROR! Syntax problem in a formula. "},{"location":"spreadsheets/#cell-addresses","text":"=ROW() =COLUMN() =ADDRESS(H5, I5) Absolute =ADDRESS(H5, I5, 4) Relative =INDIRECT() =OFFSET(cell_reference, offset_rows, offset_columns, [height], [width]) =INDEX(Range, row, column)","title":"Cell Addresses"},{"location":"spreadsheets/#lookups-matching","text":"=VLOOKUP(search_key, range, index, [is_sorted]) =SORT(range, sort_column, is_ascending, [sort_column2, ...], [is_ascending2, ...]) =MATCH(search_key, range, [search_type]) =UNIQUE(Range) =COUNTIF(Range,value) =COUNTIFS(Range1, value1, Range2, value2...) =SUMIF(Range1, value1 in Range1, Range2) = Sum of values coresponding to value1 in Range2 =AVERAGEIF(Range1, value1 in Range1, Range2) = Average of values coresponding to value1 in Range2","title":"Lookups &amp; matching"},{"location":"spreadsheets/basics/","text":"Spreadsheets Course Basics =121+21 142 Mathematics + - * / ^ Percentages = 2 * 21% Comparison Operators <, >: smaller/greater than <=, >=: smaller/greater than or equal to =, <>: equal/not equal to Text '23 = 23 in text Formatting Format > Number > More formats Absolute references $A$12","title":"Basics"},{"location":"spreadsheets/basics/#spreadsheets-course","text":"","title":"Spreadsheets Course"},{"location":"spreadsheets/basics/#basics","text":"=121+21 142","title":"Basics"},{"location":"spreadsheets/basics/#mathematics","text":"+ - * / ^","title":"Mathematics"},{"location":"spreadsheets/basics/#percentages","text":"= 2 * 21%","title":"Percentages"},{"location":"spreadsheets/basics/#comparison-operators","text":"<, >: smaller/greater than <=, >=: smaller/greater than or equal to =, <>: equal/not equal to","title":"Comparison Operators"},{"location":"spreadsheets/basics/#text","text":"'23 = 23 in text","title":"Text"},{"location":"spreadsheets/basics/#formatting","text":"Format > Number > More formats","title":"Formatting"},{"location":"spreadsheets/basics/#absolute-references","text":"$A$12","title":"Absolute references"},{"location":"spreadsheets/errors/","text":"Blanks, missing values, & errors Error Cause DIV/0! Dividing by zero. VALUE! Nonsense data in a calculation. REF! Referencing a cell that has been deleted. NAME? Forgetting to quote a string. NUM! Numbers being out of range. N/A Missing value. ERROR! Syntax problem in a formula. =ISBLANK() =COUNTBLANK(Range) =NA() = #N/A =ISERROR() =ISERR()","title":"Errors"},{"location":"spreadsheets/errors/#blanks-missing-values-errors","text":"Error Cause DIV/0! Dividing by zero. VALUE! Nonsense data in a calculation. REF! Referencing a cell that has been deleted. NAME? Forgetting to quote a string. NUM! Numbers being out of range. N/A Missing value. ERROR! Syntax problem in a formula. =ISBLANK() =COUNTBLANK(Range) =NA() = #N/A =ISERROR() =ISERR()","title":"Blanks, missing values, &amp; errors"},{"location":"spreadsheets/formulas-1/","text":"IS*() ? =ISTEXT() =ISNUMBER() =ISDATE() =ISLOGICAL() =ISURL() =ISFORMULA() =ISBLANK() Coversion =N() =TO_PERCENT() =CONVERT(A2, \"sec\", \"min\") Logarthmic Transformations =LOG10() =LN() Exponential transformations =EXP() =POW(2,CELL) Square and square root transformations =SQRT() Min and Max =MIN(Range) =MAX(Range) Mean and Median =SUM(Range) =AVERAGE(Range) =MEDIAN(Range)","title":"Formulas Part 1"},{"location":"spreadsheets/formulas-1/#is","text":"=ISTEXT() =ISNUMBER() =ISDATE() =ISLOGICAL() =ISURL() =ISFORMULA() =ISBLANK()","title":"IS*() ?"},{"location":"spreadsheets/formulas-1/#coversion","text":"=N() =TO_PERCENT() =CONVERT(A2, \"sec\", \"min\")","title":"Coversion"},{"location":"spreadsheets/formulas-1/#logarthmic-transformations","text":"=LOG10() =LN()","title":"Logarthmic Transformations"},{"location":"spreadsheets/formulas-1/#exponential-transformations","text":"=EXP() =POW(2,CELL)","title":"Exponential transformations"},{"location":"spreadsheets/formulas-1/#square-and-square-root-transformations","text":"=SQRT()","title":"Square and square root transformations"},{"location":"spreadsheets/formulas-1/#min-and-max","text":"=MIN(Range) =MAX(Range)","title":"Min and Max"},{"location":"spreadsheets/formulas-1/#mean-and-median","text":"=SUM(Range) =AVERAGE(Range) =MEDIAN(Range)","title":"Mean and Median"},{"location":"spreadsheets/formulas-2/","text":"Rank =RANK(value, Range, [is_ascending]) Right and Left =RIGHT(Beauty and the Beast (2017),4) = 017) =LEFT(Star Wars: The Last Jedi,3) = Sta Length and Search =LEN() =SEARCH(\" \", cell) Concatenate =CONCATENATE(value1, value2, value3, ....) Weekday =WEEKDAY(date, [type]): evaluates to the day of the week of a date. type is 1, 2 or 3. type = 1: Sunday is day 1 and Saturday is day 7 (default) type = 2: Monday is day 1 and Sunday is day 7 type = 3: Monday is day 0 and Sunday is day 6 =DATEDIF(start_date, end_date, unit) \"Y\": the number of years between two dates \"M\": the number of months between two dates \"D\": the number of days between two dates Rounding numbers ROUND(x, n) rounds x to the nearest n decimal places. CEILING(x, y) rounds x up to the nearest multiple of y. FLOOR(x, y) rounds x down to the nearest multiple of y. =ROUND(0.746, 1) = 0.7 =ROUND(325, -2) = 300 =FLOOR(1.0985) = 1 =FLOOR(1.0985, 0.01) = 1.09 =CEILING(0.7461, 0.1) = 0.8 FLOOR(-1.5) is -2 and CEILING(-1.5) is -1 Google Sheets has two related functions called FLOOR.MATH() and CEILING.MATH(). When given one or two arguments, they behave in the same way as FLOOR() and CEILING() respectively. However, you can pass the value 1 to a third argument to make them round towards or away from zero. That is, FLOOR.MATH(-1.5, , 1) is -1 and CEILING.MATH(-1.5, , 1) is -2 Random Numbers =RAND() =RANDBETWEEN(lo, hi) =NORMINV(RAND(), 3, 2) mean 3 and standard deviation 2 Logical Operations =NOT() =AND() =OR() Flow Control =IF(condition, this op if condition true, else this op) =IFS(condition1, op1, condition2, op2, .....conditionN, opN) =SWITCH(Range, \"value1\", opValue1, \"value2\", opValue2, ....)","title":"Formulas Part 2"},{"location":"spreadsheets/formulas-2/#rank","text":"=RANK(value, Range, [is_ascending])","title":"Rank"},{"location":"spreadsheets/formulas-2/#right-and-left","text":"=RIGHT(Beauty and the Beast (2017),4) = 017) =LEFT(Star Wars: The Last Jedi,3) = Sta","title":"Right and Left"},{"location":"spreadsheets/formulas-2/#length-and-search","text":"=LEN() =SEARCH(\" \", cell)","title":"Length and Search"},{"location":"spreadsheets/formulas-2/#concatenate","text":"=CONCATENATE(value1, value2, value3, ....)","title":"Concatenate"},{"location":"spreadsheets/formulas-2/#weekday","text":"=WEEKDAY(date, [type]): evaluates to the day of the week of a date. type is 1, 2 or 3. type = 1: Sunday is day 1 and Saturday is day 7 (default) type = 2: Monday is day 1 and Sunday is day 7 type = 3: Monday is day 0 and Sunday is day 6 =DATEDIF(start_date, end_date, unit) \"Y\": the number of years between two dates \"M\": the number of months between two dates \"D\": the number of days between two dates","title":"Weekday"},{"location":"spreadsheets/formulas-2/#rounding-numbers","text":"ROUND(x, n) rounds x to the nearest n decimal places. CEILING(x, y) rounds x up to the nearest multiple of y. FLOOR(x, y) rounds x down to the nearest multiple of y. =ROUND(0.746, 1) = 0.7 =ROUND(325, -2) = 300 =FLOOR(1.0985) = 1 =FLOOR(1.0985, 0.01) = 1.09 =CEILING(0.7461, 0.1) = 0.8 FLOOR(-1.5) is -2 and CEILING(-1.5) is -1 Google Sheets has two related functions called FLOOR.MATH() and CEILING.MATH(). When given one or two arguments, they behave in the same way as FLOOR() and CEILING() respectively. However, you can pass the value 1 to a third argument to make them round towards or away from zero. That is, FLOOR.MATH(-1.5, , 1) is -1 and CEILING.MATH(-1.5, , 1) is -2","title":"Rounding numbers"},{"location":"spreadsheets/formulas-2/#random-numbers","text":"=RAND() =RANDBETWEEN(lo, hi) =NORMINV(RAND(), 3, 2) mean 3 and standard deviation 2","title":"Random Numbers"},{"location":"spreadsheets/formulas-2/#logical-operations","text":"=NOT() =AND() =OR()","title":"Logical Operations"},{"location":"spreadsheets/formulas-2/#flow-control","text":"=IF(condition, this op if condition true, else this op) =IFS(condition1, op1, condition2, op2, .....conditionN, opN) =SWITCH(Range, \"value1\", opValue1, \"value2\", opValue2, ....)","title":"Flow Control"},{"location":"spreadsheets/formulas-3/","text":"Cell Addresses =ROW() =COLUMN() =ADDRESS(H5, I5) Absolute =ADDRESS(H5, I5, 4) Relative =INDIRECT() =OFFSET(cell_reference, offset_rows, offset_columns, [height], [width]) =INDEX(Range, row, column) Lookups & matching =VLOOKUP(search_key, range, index, [is_sorted]) =SORT(range, sort_column, is_ascending, [sort_column2, ...], [is_ascending2, ...]) =MATCH(search_key, range, [search_type]) =UNIQUE(Range) =COUNTIF(Range,value) =COUNTIFS(Range1, value1, Range2, value2...) =SUMIF(Range1, value1 in Range1, Range2) = Sum of values coresponding to value1 in Range2 =AVERAGEIF(Range1, value1 in Range1, Range2) = Average of values coresponding to value1 in Range2","title":"Formulas Part 3"},{"location":"spreadsheets/formulas-3/#cell-addresses","text":"=ROW() =COLUMN() =ADDRESS(H5, I5) Absolute =ADDRESS(H5, I5, 4) Relative =INDIRECT() =OFFSET(cell_reference, offset_rows, offset_columns, [height], [width]) =INDEX(Range, row, column)","title":"Cell Addresses"},{"location":"spreadsheets/formulas-3/#lookups-matching","text":"=VLOOKUP(search_key, range, index, [is_sorted]) =SORT(range, sort_column, is_ascending, [sort_column2, ...], [is_ascending2, ...]) =MATCH(search_key, range, [search_type]) =UNIQUE(Range) =COUNTIF(Range,value) =COUNTIFS(Range1, value1, Range2, value2...) =SUMIF(Range1, value1 in Range1, Range2) = Sum of values coresponding to value1 in Range2 =AVERAGEIF(Range1, value1 in Range1, Range2) = Average of values coresponding to value1 in Range2","title":"Lookups &amp; matching"},{"location":"statistics/","text":"Statistics Population Population is the collection of all individuals or items under consideration in a statistical study. (Weiss, 1999) Finite Population Hypothetical Population Sample Sample is that part of the population from which information is collected. (Weiss, 1999) Population vs Sample Descriptive Statistics Descriptive statistics consist of methods for organizing and summarizing information (Weiss, 1999) Inferential Statistics Inferential statistics consist of methods for drawing and measuring the reliability of conclusions about population based on information obtained from a sample of the population. (Weiss, 1999) Example 1.4 (Descriptive and Inferential Statistics). Consider event of tossing dice. The dice is rolled 100 times and the results are forming the sample data. Descriptive statistics is used to grouping the sample data to the following table Inferential statistics can now be used to verify whether the dice is a fair or not. Variables A characteristic that varies from one person or thing to another is called a variable. Examples of variables for humans are height, weight, number of siblings, sex, marital status, and eye color. Discrete variables. Some variables, such as the numbers of children in family, the numbers of car accident on the certain road on different days, orthe numbers of students taking basics of statistics course are the results of counting and thus these are discrete variables. Continuous variables. Quantities such as length, weight, or temperature can in principle be measured arbitrarily accurately. Measures of Center Mode Obtain the frequency of each observed value of the variable in a data and note the greatest frequency. 1. If the greatest frequency is 1 (i.e. no value occurs more than once), then the variable has no mode. 2. If the greatest frequency is 2 or greater, then any value that occurs with that greatest frequency is called a sample mode of the variable. Median Arrange the observed values of variable in a data in increasing order. 1. If the number of observation is odd, then the sample median is the observed value exactly in the middle of the ordered list. 2. If the number of observation is even, then the sample median is the number halfway between the two middle observed values in the ordered list. In both cases, if we let n denote the number of observations in a data set, then the sample median is at position (n+1)/2 in the ordered list. Mean The sample mean of the variable is the sum of observed values in a data divided by the number of observations. Mean - Quantitative Variable with Symmetric Distribution Median - Quantitative Variable with Skewed Distribution Mode - Qualitative Variable Range The sample range of the variable is the difference between its maximum and minimum values in a data set: Range = Max \u2212 Min. Percentile Divide the whole sample set into 100 equal parts. Decile Divide the whole sample set into 10 equal parts. Quartile Divide the whole sample set into 4 equal parts. 1. The first quartile Q1 is at position (n+1)/4 2. The second quartile Q2 (the median) is at position (n+1)/2 3. The third quartile Q3 is at position 3(n+1)/4 in the ordered list IQR = Q3 \u2212 Q1 Five-number summary and boxplots Min, Q1, Q2, Q3, Max. To construct a boxplot 1. Determine the five-number summary 2. Draw a horizontal (or vertical) axis on which the numbers obtained in step 1 can be located. Above this axis, mark the quartiles and the minimum and maximum with vertical (horizontal) lines. 3. Connect the quartiles to each other to make a box, and then connect the box to the minimum and maximum with lines. Standard Deviation Deviation from center Random Variable Mean Standard Deviation Normal Distribution - Bell Shaped Distribution P(\u00b5 \u2212 \u03c3 < X < \u00b5 + \u03c3) = 0.683 P(\u00b5 \u2212 2\u03c3 < X < \u00b5 + 2\u03c3) = 0.954 P(\u00b5 \u2212 3\u03c3 < X < \u00b5 + 3\u03c3) = 0.997","title":"Index"},{"location":"statistics/#statistics","text":"","title":"Statistics"},{"location":"statistics/#population","text":"Population is the collection of all individuals or items under consideration in a statistical study. (Weiss, 1999) Finite Population Hypothetical Population","title":"Population"},{"location":"statistics/#sample","text":"Sample is that part of the population from which information is collected. (Weiss, 1999)","title":"Sample"},{"location":"statistics/#population-vs-sample","text":"","title":"Population vs Sample"},{"location":"statistics/#descriptive-statistics","text":"Descriptive statistics consist of methods for organizing and summarizing information (Weiss, 1999)","title":"Descriptive Statistics"},{"location":"statistics/#inferential-statistics","text":"Inferential statistics consist of methods for drawing and measuring the reliability of conclusions about population based on information obtained from a sample of the population. (Weiss, 1999) Example 1.4 (Descriptive and Inferential Statistics). Consider event of tossing dice. The dice is rolled 100 times and the results are forming the sample data. Descriptive statistics is used to grouping the sample data to the following table Inferential statistics can now be used to verify whether the dice is a fair or not.","title":"Inferential Statistics"},{"location":"statistics/#variables","text":"A characteristic that varies from one person or thing to another is called a variable. Examples of variables for humans are height, weight, number of siblings, sex, marital status, and eye color. Discrete variables. Some variables, such as the numbers of children in family, the numbers of car accident on the certain road on different days, orthe numbers of students taking basics of statistics course are the results of counting and thus these are discrete variables. Continuous variables. Quantities such as length, weight, or temperature can in principle be measured arbitrarily accurately.","title":"Variables"},{"location":"statistics/#measures-of-center","text":"","title":"Measures of Center"},{"location":"statistics/#mode","text":"Obtain the frequency of each observed value of the variable in a data and note the greatest frequency. 1. If the greatest frequency is 1 (i.e. no value occurs more than once), then the variable has no mode. 2. If the greatest frequency is 2 or greater, then any value that occurs with that greatest frequency is called a sample mode of the variable.","title":"Mode"},{"location":"statistics/#median","text":"Arrange the observed values of variable in a data in increasing order. 1. If the number of observation is odd, then the sample median is the observed value exactly in the middle of the ordered list. 2. If the number of observation is even, then the sample median is the number halfway between the two middle observed values in the ordered list. In both cases, if we let n denote the number of observations in a data set, then the sample median is at position (n+1)/2 in the ordered list.","title":"Median"},{"location":"statistics/#mean","text":"The sample mean of the variable is the sum of observed values in a data divided by the number of observations. Mean - Quantitative Variable with Symmetric Distribution Median - Quantitative Variable with Skewed Distribution Mode - Qualitative Variable","title":"Mean"},{"location":"statistics/#range","text":"The sample range of the variable is the difference between its maximum and minimum values in a data set: Range = Max \u2212 Min.","title":"Range"},{"location":"statistics/#percentile","text":"Divide the whole sample set into 100 equal parts.","title":"Percentile"},{"location":"statistics/#decile","text":"Divide the whole sample set into 10 equal parts.","title":"Decile"},{"location":"statistics/#quartile","text":"Divide the whole sample set into 4 equal parts. 1. The first quartile Q1 is at position (n+1)/4 2. The second quartile Q2 (the median) is at position (n+1)/2 3. The third quartile Q3 is at position 3(n+1)/4 in the ordered list IQR = Q3 \u2212 Q1","title":"Quartile"},{"location":"statistics/#five-number-summary-and-boxplots","text":"Min, Q1, Q2, Q3, Max. To construct a boxplot 1. Determine the five-number summary 2. Draw a horizontal (or vertical) axis on which the numbers obtained in step 1 can be located. Above this axis, mark the quartiles and the minimum and maximum with vertical (horizontal) lines. 3. Connect the quartiles to each other to make a box, and then connect the box to the minimum and maximum with lines.","title":"Five-number summary and boxplots"},{"location":"statistics/#standard-deviation","text":"Deviation from center","title":"Standard Deviation"},{"location":"statistics/#random-variable","text":"","title":"Random Variable"},{"location":"statistics/#mean_1","text":"","title":"Mean"},{"location":"statistics/#standard-deviation_1","text":"","title":"Standard Deviation"},{"location":"statistics/#normal-distribution-bell-shaped-distribution","text":"P(\u00b5 \u2212 \u03c3 < X < \u00b5 + \u03c3) = 0.683 P(\u00b5 \u2212 2\u03c3 < X < \u00b5 + 2\u03c3) = 0.954 P(\u00b5 \u2212 3\u03c3 < X < \u00b5 + 3\u03c3) = 0.997","title":"Normal Distribution - Bell Shaped Distribution"}]}